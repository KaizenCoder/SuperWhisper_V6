#!/usr/bin/env python3
"""
üèÜ VALIDATEUR COMPLET SUPERWHISPER V6 - MISSION GPU RTX 3090
üö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE

Teste tous les modules du projet SuperWhisper V6 et indique leur statut fonctionnel
apr√®s homog√©n√©isation GPU RTX 3090.
"""

import os
import sys
import importlib.util
import traceback
from pathlib import Path
from typing import Dict, List, Tuple

# =============================================================================
# üö® CONFIGURATION CRITIQUE GPU - RTX 3090 UNIQUEMENT 
# =============================================================================
# RTX 5060 Ti (CUDA:0) = INTERDITE - RTX 3090 (CUDA:1) = OBLIGATOIRE
os.environ['CUDA_VISIBLE_DEVICES'] = '1'        # RTX 3090 24GB EXCLUSIVEMENT
os.environ['CUDA_DEVICE_ORDER'] = 'PCI_BUS_ID'  # Ordre stable des GPU
os.environ['PYTORCH_CUDA_ALLOC_CONF'] = 'max_split_size_mb:1024'  # Optimisation m√©moire

print("üéÆ GPU Configuration: RTX 3090 (CUDA:1) forc√©e")
print(f"üîí CUDA_VISIBLE_DEVICES: {os.environ.get('CUDA_VISIBLE_DEVICES')}")

# Maintenant imports normaux...
import torch
import json
from datetime import datetime

def validate_rtx3090_mandatory():
    """Validation obligatoire de la configuration RTX 3090"""
    if not torch.cuda.is_available():
        raise RuntimeError("üö´ CUDA non disponible - RTX 3090 requise")
    
    cuda_devices = os.environ.get('CUDA_VISIBLE_DEVICES', '')
    if cuda_devices != '1':
        raise RuntimeError(f"üö´ CUDA_VISIBLE_DEVICES='{cuda_devices}' incorrect - doit √™tre '1'")
    
    cuda_order = os.environ.get('CUDA_DEVICE_ORDER', '')
    if cuda_order != 'PCI_BUS_ID':
        raise RuntimeError(f"üö´ CUDA_DEVICE_ORDER='{cuda_order}' incorrect - doit √™tre 'PCI_BUS_ID'")
    
    gpu_memory = torch.cuda.get_device_properties(0).total_memory / 1024**3
    if gpu_memory < 20:  # RTX 3090 = ~24GB
        raise RuntimeError(f"üö´ GPU ({gpu_memory:.1f}GB) trop petite - RTX 3090 requise")
    
    print(f"‚úÖ RTX 3090 valid√©e: {torch.cuda.get_device_name(0)} ({gpu_memory:.1f}GB)")

class SuperWhisperValidator:
    """Validateur complet des modules SuperWhisper V6"""
    
    def __init__(self):
        self.results = {}
        self.project_root = Path.cwd()
        
        # Liste des modules critiques √† tester (Phase 1 + Phase 2)
        self.modules_to_test = [
            # Phase 1 - Scripts principaux (6 modules)
            ("superwhisper_v6.py", "Script principal SuperWhisper V6", True),
            ("audio_input_handler.py", "Gestionnaire d'entr√©e audio", True),
            ("luxa_superwhisper_v6_gui.py", "Interface graphique GUI", False),
            ("superwhisper_v6_debug.py", "Mode debug SuperWhisper", False),
            ("test_memory_leak_v4.py", "Test Memory Leak V4", False),
            ("memory_leak_v4.py", "Memory Leak Manager V4", False),
            
            # Phase 2 - Modules Core (13 modules)
            ("STT/stt_manager_optimized.py", "Manager STT optimis√©", True),
            ("STT/transcription_with_context.py", "Transcription avec contexte", True),
            ("STT/vad_manager_optimized.py", "VAD Manager optimis√©", True),
            ("STT/whisper_manager_gpu.py", "Whisper Manager GPU", True),
            ("LUXA_LLM/claude_handler.py", "Handler Claude", False),
            ("LUXA_LLM/llm_luxa_handler.py", "LLM LUXA Handler", False),
            ("TTS/tts_handler_coqui.py", "TTS Handler Coqui", True),
            ("TTS/tts_handler_piper_native.py", "TTS Handler Piper Native", True),
            ("LLM/llm_manager_enhanced.py", "LLM Manager Enhanced", True),
            ("LUXA_TTS/tts_handler_coqui.py", "LUXA TTS Handler Coqui", True),
            ("Orchestrator/fallback_manager.py", "Fallback Manager", False),
            ("benchmarks/benchmark_stt_realistic.py", "Benchmark STT r√©aliste", False),
        ]
    
    def check_gpu_configuration_in_file(self, filepath: Path) -> Tuple[bool, str]:
        """V√©rifie si un fichier a la configuration GPU RTX 3090 correcte"""
        try:
            if not filepath.exists():
                return False, f"Fichier introuvable: {filepath}"
            
            content = filepath.read_text(encoding='utf-8')
            
            # V√©rifications critiques
            checks = [
                ("CUDA_VISIBLE_DEVICES", "os.environ['CUDA_VISIBLE_DEVICES'] = '1'", "For√ßage RTX 3090"),
                ("CUDA_DEVICE_ORDER", "os.environ['CUDA_DEVICE_ORDER'] = 'PCI_BUS_ID'", "Ordre GPU stable"),
                ("PYTORCH_CUDA_ALLOC_CONF", "os.environ['PYTORCH_CUDA_ALLOC_CONF']", "Optimisation m√©moire"),
                ("validate_rtx3090", "def validate_rtx3090", "Fonction validation obligatoire"),
                ("Shebang", "#!/usr/bin/env python3", "Shebang standard"),
            ]
            
            missing = []
            for name, pattern, desc in checks:
                if pattern not in content:
                    missing.append(f"{name} ({desc})")
            
            if missing:
                return False, f"Configuration GPU incompl√®te: {', '.join(missing)}"
            
            return True, "Configuration GPU RTX 3090 compl√®te"
            
        except Exception as e:
            return False, f"Erreur lecture fichier: {str(e)}"
    
    def test_module_import(self, filepath: Path) -> Tuple[bool, str]:
        """Teste si un module peut √™tre import√© sans erreur"""
        try:
            # Convertir chemin en nom de module
            module_name = str(filepath.with_suffix(''))
            module_name = module_name.replace('/', '.').replace('\\', '.')
            if module_name.startswith('.'):
                module_name = module_name[1:]
            
            # Charger le module
            spec = importlib.util.spec_from_file_location(module_name, filepath)
            if spec is None:
                return False, "Impossible de cr√©er spec module"
            
            module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(module)
            
            return True, "Import r√©ussi"
            
        except ImportError as e:
            return False, f"D√©pendance manquante: {str(e)}"
        except Exception as e:
            return False, f"Erreur import: {type(e).__name__}: {str(e)}"
    
    def test_module(self, filename: str, description: str, gpu_required: bool) -> Dict:
        """Teste un module sp√©cifique"""
        print(f"\nüîç Test: {filename}")
        print(f"   üìù {description}")
        
        filepath = self.project_root / filename
        result = {
            'filename': filename,
            'description': description,
            'gpu_required': gpu_required,
            'file_exists': False,
            'gpu_config_ok': False,
            'import_ok': False,
            'functional': False,
            'errors': [],
            'warnings': []
        }
        
        # Test 1: Existence du fichier
        if not filepath.exists():
            result['errors'].append(f"Fichier introuvable: {filepath}")
            print(f"   ‚ùå Fichier introuvable")
            return result
        
        result['file_exists'] = True
        print(f"   ‚úÖ Fichier existe")
        
        # Test 2: Configuration GPU (si requise)
        if gpu_required:
            gpu_ok, gpu_msg = self.check_gpu_configuration_in_file(filepath)
            result['gpu_config_ok'] = gpu_ok
            if gpu_ok:
                print(f"   ‚úÖ Config GPU: {gpu_msg}")
            else:
                result['errors'].append(f"Config GPU: {gpu_msg}")
                print(f"   ‚ùå Config GPU: {gpu_msg}")
        else:
            result['gpu_config_ok'] = True  # Non applicable
            result['warnings'].append("Module sans GPU - config non v√©rifi√©e")
            print(f"   ‚ö†Ô∏è  GPU non requis pour ce module")
        
        # Test 3: Import du module
        import_ok, import_msg = self.test_module_import(filepath)
        result['import_ok'] = import_ok
        if import_ok:
            print(f"   ‚úÖ Import: {import_msg}")
        else:
            result['errors'].append(f"Import: {import_msg}")
            print(f"   ‚ùå Import: {import_msg}")
        
        # D√©terminer si fonctionnel
        result['functional'] = result['file_exists'] and result['gpu_config_ok'] and result['import_ok']
        
        status = "‚úÖ FONCTIONNEL" if result['functional'] else "‚ùå NON FONCTIONNEL"
        print(f"   üèÜ Statut: {status}")
        
        return result
    
    def run_validation(self) -> Dict:
        """Lance la validation compl√®te de tous les modules"""
        print("üèÜ VALIDATION COMPL√àTE SUPERWHISPER V6 - MISSION GPU RTX 3090")
        print("=" * 70)
        print(f"üìÇ Projet: {self.project_root}")
        print(f"üéÆ GPU: RTX 3090 (CUDA:1) exclusif")
        print(f"üìÖ Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        # Validation GPU syst√®me
        try:
            validate_rtx3090_mandatory()
        except Exception as e:
            print(f"\nüö® ERREUR CRITIQUE GPU: {e}")
            return {'error': str(e)}
        
        # Test de tous les modules
        for filename, description, gpu_required in self.modules_to_test:
            result = self.test_module(filename, description, gpu_required)
            self.results[filename] = result
        
        return self.generate_summary()
    
    def generate_summary(self) -> Dict:
        """G√©n√®re un r√©sum√© complet de la validation"""
        print("\n" + "=" * 70)
        print("üìã R√âSUM√â VALIDATION SUPERWHISPER V6")
        print("=" * 70)
        
        # Statistiques
        total = len(self.results)
        functional = sum(1 for r in self.results.values() if r['functional'])
        non_functional = total - functional
        
        gpu_required = sum(1 for r in self.results.values() if r['gpu_required'])
        gpu_ok = sum(1 for r in self.results.values() if r['gpu_required'] and r['gpu_config_ok'])
        
        print(f"üìä STATISTIQUES:")
        print(f"   ‚Ä¢ Total modules test√©s: {total}")
        print(f"   ‚Ä¢ ‚úÖ Fonctionnels: {functional} ({functional/total*100:.1f}%)")
        print(f"   ‚Ä¢ ‚ùå Non fonctionnels: {non_functional} ({non_functional/total*100:.1f}%)")
        print(f"   ‚Ä¢ üéÆ Modules GPU requis: {gpu_required}")
        print(f"   ‚Ä¢ üéÆ Config GPU OK: {gpu_ok}/{gpu_required}")
        
        # D√©tail par statut
        print(f"\n‚úÖ MODULES FONCTIONNELS ({functional}):")
        for filename, result in self.results.items():
            if result['functional']:
                gpu_mark = "üéÆ" if result['gpu_required'] else "üíª"
                print(f"   {gpu_mark} {filename} - {result['description']}")
        
        if non_functional > 0:
            print(f"\n‚ùå MODULES NON FONCTIONNELS ({non_functional}):")
            for filename, result in self.results.items():
                if not result['functional']:
                    gpu_mark = "üéÆ" if result['gpu_required'] else "üíª"
                    print(f"   {gpu_mark} {filename} - {result['description']}")
                    for error in result['errors']:
                        print(f"      üî∏ {error}")
        
        # Recommandations
        print(f"\nüí° RECOMMANDATIONS:")
        if non_functional == 0:
            print("   üéâ Tous les modules sont fonctionnels !")
            print("   üöÄ SuperWhisper V6 pr√™t pour la production")
        else:
            print(f"   üîß Corriger {non_functional} module(s) non fonctionnel(s)")
            print("   üéÆ V√©rifier configurations GPU manquantes")
            print("   üì¶ Installer d√©pendances manquantes")
        
        # R√©sum√© mission GPU
        gpu_success_rate = gpu_ok / gpu_required * 100 if gpu_required > 0 else 100
        print(f"\nüèÜ MISSION GPU RTX 3090:")
        print(f"   ‚Ä¢ Taux de succ√®s: {gpu_success_rate:.1f}%")
        if gpu_success_rate == 100:
            print("   ‚úÖ Mission GPU R√âUSSIE - RTX 3090 exclusive")
        else:
            print("   ‚ö†Ô∏è  Mission GPU EN COURS - modules √† corriger")
        
        return {
            'timestamp': datetime.now().isoformat(),
            'total_modules': total,
            'functional_modules': functional,
            'non_functional_modules': non_functional,
            'gpu_modules_required': gpu_required,
            'gpu_modules_ok': gpu_ok,
            'gpu_success_rate': gpu_success_rate,
            'mission_status': 'COMPLETED' if gpu_success_rate == 100 else 'IN_PROGRESS',
            'results': self.results
        }
    
    def export_report(self, filepath: str):
        """Exporte le rapport en JSON"""
        summary = self.generate_summary()
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(summary, f, indent=2, ensure_ascii=False)
        print(f"\nüíæ Rapport export√©: {filepath}")

def main():
    """Fonction principale de validation"""
    validator = SuperWhisperValidator()
    
    try:
        summary = validator.run_validation()
        
        # Export rapport
        report_path = "validation_report_superwhisper_v6.json"
        validator.export_report(report_path)
        
        # Code de sortie
        if summary.get('gpu_success_rate', 0) == 100:
            print("\nüéâ VALIDATION R√âUSSIE - SuperWhisper V6 op√©rationnel")
            sys.exit(0)
        else:
            print("\n‚ö†Ô∏è  VALIDATION PARTIELLE - corrections n√©cessaires")
            sys.exit(1)
            
    except Exception as e:
        print(f"\nüö® ERREUR VALIDATION: {e}")
        traceback.print_exc()
        sys.exit(2)

# APPELER DANS TOUS LES SCRIPTS PRINCIPAUX
if __name__ == "__main__":
    validate_rtx3090_mandatory()
    main() 