#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test de performance TTS Piper avec RTX 3090
- Configuration GPU correcte
- R√©solution DLLs CUDA
- Benchmark de performance
"""

import sys
import os
import time
import traceback

# Configuration RTX 3090 AVANT tous les imports
os.environ['CUDA_VISIBLE_DEVICES'] = '0'  # RTX 3090 24GB
os.environ['CUDA_DEVICE_ORDER'] = 'PCI_BUS_ID'

# Ajouter le r√©pertoire PyTorch au PATH pour les DLLs CUDA
torch_lib_path = os.path.join(os.getcwd(), 'venv_piper312', 'Lib', 'site-packages', 'torch', 'lib')
if os.path.exists(torch_lib_path):
    current_path = os.environ.get('PATH', '')
    if torch_lib_path not in current_path:
        os.environ['PATH'] = current_path + os.pathsep + torch_lib_path
        print(f"‚úÖ DLLs CUDA ajout√©es au PATH: {torch_lib_path}")

# Ajouter le r√©pertoire courant au path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_rtx3090_performance():
    """Test de performance TTS complet RTX 3090"""
    
    print("üöÄ TEST PERFORMANCE TTS RTX 3090")
    print("=" * 60)
    
    # Configuration du test
    config = {
        'model_path': 'D:\\TTS_Voices\\piper\\fr_FR-siwis-medium.onnx',
        'use_gpu': True,
        'sample_rate': 22050,
        'noise_scale': 0.667,
        'noise_scale_w': 0.8,
        'length_scale': 1.0
    }
    
    try:
        # V√©rification du mod√®le
        print("\\n1. üîç V√©rification du mod√®le...")
        if not os.path.exists(config['model_path']):
            print(f"‚ùå Mod√®le non trouv√©: {config['model_path']}")
            return False
            
        model_size = os.path.getsize(config['model_path']) / 1024**2
        print(f"‚úÖ Mod√®le trouv√©: {config['model_path']} ({model_size:.1f} MB)")
        
        # V√©rification PyTorch + RTX 3090
        print("\\n2. üéÆ V√©rification RTX 3090...")
        import torch
        if torch.cuda.is_available():
            gpu_name = torch.cuda.get_device_name(0)  # RTX 3090 (CUDA:0)
            gpu_memory = torch.cuda.get_device_properties(0).total_memory / 1024**3  # RTX 3090 (CUDA:0)
            print(f"‚úÖ GPU d√©tect√©: {gpu_name} ({gpu_memory:.1f}GB)")
            
            if "RTX 3090" in gpu_name or gpu_memory >= 20:
                print("‚úÖ RTX 3090 confirm√© !")
            else:
                print("‚ö†Ô∏è GPU diff√©rent du RTX 3090 attendu")
        else:
            print("‚ùå CUDA non disponible")
            
        # Import du handler
        print("\\n3. üì¶ Import du handler RTX 3090...")
        from TTS.tts_handler_piper_rtx3090 import TTSHandlerPiperRTX3090
        print("‚úÖ Handler RTX 3090 import√©")
        
        # Initialisation
        print("\\n4. üöÄ Initialisation RTX 3090...")
        start_init = time.time()
        handler = TTSHandlerPiperRTX3090(config)
        init_time = time.time() - start_init
        print(f"‚úÖ Handler RTX 3090 initialis√© en {init_time:.2f}s")
        
        # Tests de performance
        test_texts = [
            "Salut !",
            "Bonjour, comment allez-vous ?",
            "LUXA est un assistant vocal intelligent d√©velopp√© avec des technologies d'IA avanc√©es.",
            "Ceci est un test de synth√®se vocale fran√ßaise avec Piper sur RTX 3090 pour mesurer les performances GPU et optimiser la vitesse de g√©n√©ration audio."
        ]
        
        print("\\n5. üèÉ‚Äç‚ôÇÔ∏è Benchmark de performance RTX 3090...")
        
        total_chars = 0
        total_time = 0
        
        for i, text in enumerate(test_texts):
            print(f"\\n   Test {i+1}/4: \"{text}\"")
            print(f"   üìù Longueur: {len(text)} caract√®res")
            
            start_time = time.time()
            audio_data = handler.synthesize(text)
            synth_time = time.time() - start_time
            
            if len(audio_data) > 0:
                chars_per_sec = len(text) / synth_time
                audio_duration = len(audio_data) / config['sample_rate']
                rtf = synth_time / audio_duration  # Real-time factor
                
                print(f"   ‚ö° Temps: {synth_time:.3f}s")
                print(f"   üéµ Audio: {len(audio_data)} √©chantillons ({audio_duration:.2f}s)")
                print(f"   üìä Performance: {chars_per_sec:.1f} char/s")
                print(f"   üöÄ RTF: {rtf:.3f} (plus petit = plus rapide)")
                
                total_chars += len(text)
                total_time += synth_time
                
                # Lecture du dernier test
                if i == len(test_texts) - 1:
                    print(f"   üîä Lecture audio test...")
                    handler.speak(text)
            else:
                print(f"   ‚ùå √âchec synth√®se")
                
        # R√©sum√© des performances
        if total_time > 0:
            avg_chars_per_sec = total_chars / total_time
            print(f"\\n6. üìä R√âSUM√â PERFORMANCE RTX 3090:")
            print(f"   üìù Total caract√®res: {total_chars}")
            print(f"   ‚è±Ô∏è Temps total: {total_time:.2f}s")
            print(f"   ‚ö° Performance moyenne: {avg_chars_per_sec:.1f} caract√®res/s")
            
            # √âvaluation des performances
            if avg_chars_per_sec >= 100:
                print(f"   üèÜ EXCELLENT ! Performance GPU optimale")
            elif avg_chars_per_sec >= 50:
                print(f"   ‚úÖ BON ! Performance acceptable")
            else:
                print(f"   ‚ö†Ô∏è MOYEN. Possibles am√©liorations n√©cessaires")
                
            return True
        else:
            print(f"\\n‚ùå Aucun test de performance r√©ussi")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur test RTX 3090: {e}")
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("üéØ BENCHMARK TTS PIPER RTX 3090")
    print("Configuration: CUDA_VISIBLE_DEVICES='0' + DLLs CUDA")
    print()
    
    success = test_rtx3090_performance()
    
    print("\\n" + "=" * 60)
    if success:
        print("üéâ TEST RTX 3090 R√âUSSI - PERFORMANCES MESUR√âES")
    else:
        print("üö® √âCHEC TEST RTX 3090 - V√âRIFIER CONFIGURATION")
    print("=" * 60) 