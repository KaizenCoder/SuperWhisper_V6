#!/usr/bin/env python3
"""
Script de t√©l√©chargement du mod√®le TTS fr_FR-siwis-medium.onnx
Bas√© sur la transmission du coordinateur du 10 juin 2025
"""

import os
import sys
import requests
from pathlib import Path
from urllib.parse import urlparse

def download_file(url: str, destination: Path, chunk_size: int = 8192) -> bool:
    """T√©l√©charge un fichier avec barre de progression"""
    try:
        print(f"üì• T√©l√©chargement depuis: {url}")
        print(f"üìÅ Destination: {destination}")
        
        response = requests.get(url, stream=True)
        response.raise_for_status()
        
        total_size = int(response.headers.get('content-length', 0))
        downloaded = 0
        
        destination.parent.mkdir(parents=True, exist_ok=True)
        
        with open(destination, 'wb') as f:
            for chunk in response.iter_content(chunk_size=chunk_size):
                if chunk:
                    f.write(chunk)
                    downloaded += len(chunk)
                    
                    if total_size > 0:
                        percent = (downloaded / total_size) * 100
                        print(f"\rüìä Progression: {percent:.1f}% ({downloaded}/{total_size} bytes)", end='')
        
        print(f"\n‚úÖ T√©l√©chargement termin√©: {destination}")
        return True
        
    except Exception as e:
        print(f"\n‚ùå Erreur t√©l√©chargement: {e}")
        return False

def main():
    """T√©l√©charge le mod√®le TTS fr_FR-siwis-medium.onnx"""
    print("üöÄ T√âL√âCHARGEMENT MOD√àLE TTS SUPERWHISPER V6")
    print("="*60)
    
    # URLs possibles pour le mod√®le (Hugging Face)
    model_urls = [
        "https://huggingface.co/rhasspy/piper-voices/resolve/v1.0.0/fr/fr_FR/siwis/medium/fr_FR-siwis-medium.onnx",
        "https://huggingface.co/rhasspy/piper-voices/resolve/main/fr/fr_FR/siwis/medium/fr_FR-siwis-medium.onnx"
    ]
    
    config_urls = [
        "https://huggingface.co/rhasspy/piper-voices/resolve/v1.0.0/fr/fr_FR/siwis/medium/fr_FR-siwis-medium.onnx.json",
        "https://huggingface.co/rhasspy/piper-voices/resolve/main/fr/fr_FR/siwis/medium/fr_FR-siwis-medium.onnx.json"
    ]
    
    # R√©pertoires de destination
    models_dir = Path("models")
    tts_models_dir = Path("TTS/models")
    
    # Cr√©er r√©pertoires
    models_dir.mkdir(exist_ok=True)
    tts_models_dir.mkdir(parents=True, exist_ok=True)
    
    success = False
    
    # T√©l√©charger mod√®le ONNX
    print("\n1Ô∏è‚É£ T√©l√©chargement du mod√®le ONNX...")
    for url in model_urls:
        model_path = models_dir / "fr_FR-siwis-medium.onnx"
        if download_file(url, model_path):
            # Copier aussi dans TTS/models
            import shutil
            shutil.copy2(model_path, tts_models_dir / "fr_FR-siwis-medium.onnx")
            print(f"üìã Copi√© vers: {tts_models_dir / 'fr_FR-siwis-medium.onnx'}")
            success = True
            break
    
    if not success:
        print("‚ùå √âchec t√©l√©chargement mod√®le ONNX")
        return False
    
    # T√©l√©charger configuration JSON
    print("\n2Ô∏è‚É£ T√©l√©chargement de la configuration JSON...")
    config_success = False
    for url in config_urls:
        config_path = models_dir / "fr_FR-siwis-medium.onnx.json"
        if download_file(url, config_path):
            # Copier aussi dans TTS/models
            import shutil
            shutil.copy2(config_path, tts_models_dir / "fr_FR-siwis-medium.onnx.json")
            print(f"üìã Copi√© vers: {tts_models_dir / 'fr_FR-siwis-medium.onnx.json'}")
            config_success = True
            break
    
    if not config_success:
        print("‚ö†Ô∏è √âchec t√©l√©chargement configuration JSON (optionnel)")
    
    # V√©rification finale
    print("\n3Ô∏è‚É£ V√©rification des fichiers...")
    model_file = models_dir / "fr_FR-siwis-medium.onnx"
    config_file = models_dir / "fr_FR-siwis-medium.onnx.json"
    
    if model_file.exists():
        size_mb = model_file.stat().st_size / (1024 * 1024)
        print(f"‚úÖ Mod√®le ONNX: {model_file} ({size_mb:.1f} MB)")
    else:
        print(f"‚ùå Mod√®le ONNX manquant: {model_file}")
        return False
    
    if config_file.exists():
        size_kb = config_file.stat().st_size / 1024
        print(f"‚úÖ Configuration JSON: {config_file} ({size_kb:.1f} KB)")
    else:
        print(f"‚ö†Ô∏è Configuration JSON manquante: {config_file}")
    
    print("\nüéä T√âL√âCHARGEMENT TERMIN√â AVEC SUCC√àS!")
    print("‚úÖ Le mod√®le TTS fr_FR-siwis-medium.onnx est maintenant disponible")
    print("üîÑ Vous pouvez maintenant relancer le test de validation pipeline")
    
    return True

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è T√©l√©chargement interrompu")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erreur inattendue: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1) 