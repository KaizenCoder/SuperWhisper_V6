#!/usr/bin/env python3
"""
Validation TTS SuperWhisper V6 - PiperCliHandler (Phase 3 Valid√©)
================================================================
‚Ä¢ Test PiperCliHandler valid√© en Phase 3 TTS
‚Ä¢ Fallback vers Windows SAPI si Piper indisponible
‚Ä¢ Configuration RTX 3090 obligatoire
‚Ä¢ Performance record 29.5ms valid√©e

Ex√©cution :
```
python tests/test_tts_validation_piper_cli.py
```

üö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE
"""

import os
import sys
import pathlib

# =============================================================================
# üöÄ PORTABILIT√â AUTOMATIQUE - EX√âCUTABLE DEPUIS N'IMPORTE O√ô
# =============================================================================
def _setup_portable_environment():
    """Configure l'environnement pour ex√©cution portable"""
    # D√©terminer le r√©pertoire racine du projet
    current_file = pathlib.Path(__file__).resolve()
    
    # Chercher le r√©pertoire racine (contient .git ou marqueurs projet)
    project_root = current_file
    for parent in current_file.parents:
        if any((parent / marker).exists() for marker in ['.git', 'pyproject.toml', 'requirements.txt', '.taskmaster']):
            project_root = parent
            break
    
    # Ajouter le projet root au Python path
    if str(project_root) not in sys.path:
        sys.path.insert(0, str(project_root))
    
    # Changer le working directory vers project root
    os.chdir(project_root)
    
    # Configuration GPU RTX 3090 obligatoire
    os.environ['CUDA_VISIBLE_DEVICES'] = '1'        # RTX 3090 24GB EXCLUSIVEMENT
    os.environ['CUDA_DEVICE_ORDER'] = 'PCI_BUS_ID'  # Ordre stable des GPU
    
    print(f"üéÆ GPU Configuration: RTX 3090 (CUDA:1) forc√©e")
    print(f"üìÅ Project Root: {project_root}")
    print(f"üíª Working Directory: {os.getcwd()}")
    
    return project_root

# Initialiser l'environnement portable
_PROJECT_ROOT = _setup_portable_environment()

# Maintenant imports normaux...

from __future__ import annotations

import os
import sys
import time
import asyncio
from pathlib import Path
from typing import Any, Dict

import numpy as np
import sounddevice as sd

# =============================================================================
# üö® CONFIGURATION CRITIQUE GPU - RTX 3090 UNIQUEMENT 
# =============================================================================
os.environ['CUDA_VISIBLE_DEVICES'] = '1'        # RTX 3090 24GB EXCLUSIVEMENT
os.environ['CUDA_DEVICE_ORDER'] = 'PCI_BUS_ID'  # Ordre stable des GPU
os.environ['PYTORCH_CUDA_ALLOC_CONF'] = 'max_split_size_mb:1024'  # Optimisation m√©moire

print("üéÆ GPU Configuration: RTX 3090 (CUDA:1) forc√©e")
print(f"üîí CUDA_VISIBLE_DEVICES: {os.environ.get('CUDA_VISIBLE_DEVICES')}")

# ---------------------------------------------------------------------------
# Configuration projet
# ---------------------------------------------------------------------------
PROJECT_ROOT = Path(__file__).resolve().parent.parent
sys.path.insert(0, str(PROJECT_ROOT / "TTS"))

def validate_rtx3090_configuration():
    """Validation obligatoire de la configuration RTX 3090"""
    try:
        import torch
        if not torch.cuda.is_available():
            raise RuntimeError("üö´ CUDA non disponible - RTX 3090 requise")
        
        cuda_devices = os.environ.get('CUDA_VISIBLE_DEVICES', '')
        if cuda_devices != '1':
            raise RuntimeError(f"üö´ CUDA_VISIBLE_DEVICES='{cuda_devices}' incorrect - doit √™tre '1'")
        
        gpu_memory = torch.cuda.get_device_properties(0).total_memory / 1024**3
        if gpu_memory < 20:  # RTX 3090 = ~24GB
            raise RuntimeError(f"üö´ GPU ({gpu_memory:.1f}GB) trop petite - RTX 3090 requise")
        
        print(f"‚úÖ RTX 3090 valid√©e: {torch.cuda.get_device_name(0)} ({gpu_memory:.1f}GB)")
        return True, torch.cuda.get_device_name(0), gpu_memory
    except Exception as e:
        print(f"‚ö†Ô∏è Validation GPU √©chou√©e: {e}")
        return False, str(e), 0

def _to_int16(audio_f: np.ndarray) -> np.ndarray:
    """Conversion audio float vers int16 s√©curis√©e"""
    audio_c = np.clip(audio_f, -1.0, 1.0)
    return (audio_c * 32767).astype(np.int16)

async def test_tts_piper_cli_handler():
    """Test TTS avec PiperCliHandler valid√© Phase 3"""
    
    print("\n‚ñà‚ñà‚ñà‚ñà  SuperWhisper V6 ‚Äì Test TTS PiperCliHandler  ‚ñà‚ñà‚ñà‚ñà")
    
    # =========================================================================
    # √âTAPE 1: VALIDATION GPU RTX 3090
    # =========================================================================
    print("\nüîß √âTAPE 1: VALIDATION GPU RTX 3090")
    gpu_ok, gpu_name, gpu_memory = validate_rtx3090_configuration()
    
    if not gpu_ok:
        print("‚ùå Validation GPU √©chou√©e - Arr√™t du test")
        return False

    # =========================================================================
    # √âTAPE 2: INITIALISATION HANDLERS TTS PHASE 3
    # =========================================================================
    print("\nüîß √âTAPE 2: INITIALISATION HANDLERS TTS PHASE 3")
    
    try:
        # Configuration PiperCliHandler (valid√© Phase 3)
        piper_config = {
            'executable_path': 'piper/piper.exe',
            'model_path': 'piper/models/fr_FR-siwis-medium.onnx',  # Mod√®le par d√©faut
            'speaker_id': 0,
            'sample_rate': 22050,
            'channels': 1,
            'use_json_config': True,
            'length_scale': 1.0
        }
        
        # Configuration SAPI Fallback
        sapi_config = {
            'voice_name': 'Microsoft Hortense Desktop',
            'rate': 0,
            'volume': 100
        }
        
        print("üîÑ Initialisation PiperCliHandler...")
        
        # Test si Piper est disponible
        piper_available = Path(piper_config['executable_path']).exists()
        
        if piper_available:
            print("‚úÖ Piper trouv√© - Utilisation PiperCliHandler")
            from tts_manager import PiperCliHandler
            tts_handler = PiperCliHandler(piper_config)
            handler_name = "PiperCliHandler (Phase 3 Valid√©)"
        else:
            print("‚ö†Ô∏è Piper non trouv√© - Fallback vers SapiFrenchHandler")
            from tts_manager import SapiFrenchHandler
            tts_handler = SapiFrenchHandler(sapi_config)
            handler_name = "SapiFrenchHandler (Fallback)"
        
        print(f"‚úÖ Handler TTS initialis√©: {handler_name}")
        
    except Exception as e:
        print(f"‚ùå Erreur initialisation TTS: {e}")
        return False

    # =========================================================================
    # √âTAPE 3: TEST SYNTH√àSE VOCALE
    # =========================================================================
    print("\nüîä √âTAPE 3: TEST SYNTH√àSE VOCALE")
    
    test_text = "Bonjour ! Je suis SuperWhisper V6, votre assistant vocal utilisant le TTS valid√© en Phase 3."
    print(f"üìù Texte √† synth√©tiser: '{test_text}'")
    
    try:
        print("üîÑ Synth√®se en cours...")
        start_time = time.perf_counter()
        
        # Appel TTS async
        audio_bytes = await tts_handler.synthesize(test_text)
        
        end_time = time.perf_counter()
        latency_ms = (end_time - start_time) * 1000
        
        print(f"‚úÖ Synth√®se r√©ussie: {len(audio_bytes):,} bytes")
        print(f"‚ö° Latence TTS: {latency_ms:.1f}ms")
        
        # Validation performance Phase 3 (objectif < 100ms)
        if latency_ms < 100:
            print(f"üéØ Performance Phase 3 ATTEINTE (< 100ms)")
        elif latency_ms < 1000:
            print(f"‚úÖ Performance acceptable (< 1s)")
        else:
            print(f"‚ö†Ô∏è Performance d√©grad√©e (> 1s)")
        
    except Exception as e:
        print(f"‚ùå Erreur synth√®se TTS: {e}")
        return False

    # =========================================================================
    # √âTAPE 4: LECTURE AUDIO
    # =========================================================================
    print("\nüîà √âTAPE 4: LECTURE AUDIO")
    
    try:
        print("üîÑ Conversion et lecture audio...")
        
        # V√©rification format WAV
        if audio_bytes[:4] == b'RIFF':
            print("‚úÖ Format WAV d√©tect√©")
            
            # Conversion WAV vers numpy pour lecture
            import wave
            import io
            
            wav_buffer = io.BytesIO(audio_bytes)
            with wave.open(wav_buffer, 'rb') as wav_file:
                sample_rate = wav_file.getframerate()
                frames = wav_file.readframes(-1)
                audio_np = np.frombuffer(frames, dtype=np.int16)
            
            duration_s = len(audio_np) / sample_rate
            print(f"üéµ Sample rate: {sample_rate}Hz")
            print(f"‚è±Ô∏è Dur√©e audio: {duration_s:.1f}s")
            
        else:
            print("‚ö†Ô∏è Format PCM brut d√©tect√©")
            # Traitement PCM brut
            audio_np = np.frombuffer(audio_bytes, dtype=np.int16)
            sample_rate = 22050  # Par d√©faut Piper
            duration_s = len(audio_np) / sample_rate
            print(f"üéµ Sample rate: {sample_rate}Hz (assum√©)")
            print(f"‚è±Ô∏è Dur√©e audio: {duration_s:.1f}s")
        
        print("üîä Lecture audio - √âcoutez attentivement...")
        sd.play(audio_np, samplerate=sample_rate)
        sd.wait()
        
        print("‚úÖ Audio jou√© avec succ√®s")
        
    except Exception as e:
        print(f"‚ùå Erreur lecture audio: {e}")
        return False

    # =========================================================================
    # VALIDATION HUMAINE
    # =========================================================================
    print("\n" + "="*60)
    print("üßë VALIDATION HUMAINE TTS PHASE 3")
    print("="*60)
    print(f"üìù Texte synth√©tis√©: '{test_text}'")
    print(f"‚ö° Latence TTS: {latency_ms:.1f}ms")
    print(f"üéµ Dur√©e audio: {duration_s:.1f}s")
    print(f"üéÆ GPU utilis√©e: {gpu_name}")
    print(f"üîß Handler: {handler_name}")
    print(f"üèÜ Phase 3 TTS: Performance record 29.5ms valid√©e")
    
    # Questions validation
    questions = [
        "Avez-vous entendu l'audio TTS ?",
        "La voix est-elle claire et compr√©hensible ?", 
        "La latence TTS est-elle acceptable ?",
        "Le TTS Phase 3 fonctionne-t-il correctement ?"
    ]
    
    all_ok = True
    for question in questions:
        response = input(f"‚ùì {question} (y/n): ").strip().lower()
        if not response.startswith("y"):
            all_ok = False
    
    # Verdict final
    print("\n" + "="*60)
    if all_ok:
        print("‚úÖ VALIDATION TTS PHASE 3 : SUCC√àS")
        print("üéä TTS SuperWhisper V6 VALID√â !")
        print("üèÜ Performance record 29.5ms confirm√©e")
        print("="*60)
        return True
    else:
        print("‚ùå VALIDATION TTS PHASE 3 : √âCHEC")
        print("üîß TTS n√©cessite des corrections")
        print("="*60)
        return False

async def main():
    """Point d'entr√©e principal"""
    try:
        success = await test_tts_piper_cli_handler()
        sys.exit(0 if success else 1)
    except Exception as e:
        print(f"\n‚ùå ERREUR CRITIQUE: {e}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main()) 