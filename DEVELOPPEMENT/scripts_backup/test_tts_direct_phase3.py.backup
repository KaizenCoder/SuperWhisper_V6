#!/usr/bin/env python3\n\"\"\"\nTest TTS Direct - Phase 3 Valid√©e\nüö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE\n\nTest du UnifiedTTSManager qui a eu des performances record en Phase 3 :\n- Latence Cache : 29.5ms (objectif <100ms)\n- Taux Cache : 93.1% (objectif >80%)\n- Throughput : 174.9 chars/s (objectif >100)\n- Stabilit√© : 100% (objectif >95%)\n\"\"\"\n\nimport os\nimport sys\nimport asyncio\nimport time\nfrom pathlib import Path\n\n# =============================================================================\n# üö® CONFIGURATION CRITIQUE GPU - RTX 3090 UNIQUEMENT \n# =============================================================================\nos.environ['CUDA_VISIBLE_DEVICES'] = '1'        # RTX 3090 24GB EXCLUSIVEMENT\nos.environ['CUDA_DEVICE_ORDER'] = 'PCI_BUS_ID'  # Ordre stable des GPU\nos.environ['PYTORCH_CUDA_ALLOC_CONF'] = 'max_split_size_mb:1024'  # Optimisation m√©moire\n\nprint(\"üéÆ GPU Configuration: RTX 3090 (CUDA:1) forc√©e\")\nprint(f\"üîí CUDA_VISIBLE_DEVICES: {os.environ.get('CUDA_VISIBLE_DEVICES')}\")\n\n# Imports\nPROJECT_ROOT = Path(__file__).resolve().parent.parent.parent\nsys.path.insert(0, str(PROJECT_ROOT))\n\nfrom TTS.tts_manager import UnifiedTTSManager\nimport sounddevice as sd\nimport numpy as np\nimport wave\nimport io\n\nasync def test_tts_direct_phase3():\n    \"\"\"\n    Test direct du TTS avec configuration Phase 3 valid√©e\n    \"\"\"\n    print(\"\\nüéØ TEST TTS DIRECT - CONFIGURATION PHASE 3 VALID√âE\")\n    print(\"=\" * 60)\n    \n    # Configuration TTS Phase 3 (performances record)\n    config = {\n        'enable_piper_native': True,\n        'cache': {\n            'max_size_mb': 100,\n            'ttl_seconds': 3600\n        },\n        'circuit_breaker': {\n            'failure_threshold': 3,\n            'reset_timeout_seconds': 60\n        },\n        'backends': {\n            'piper_cli': {\n                'enabled': True,\n                'executable_path': 'piper/piper.exe',\n                'model_path': 'models/fr_FR-siwis-medium.onnx',\n                'speaker_id': 0,\n                'target_latency_ms': 1000,\n                'sample_rate': 22050,\n                'channels': 1\n            },\n            'sapi_french': {\n                'enabled': True,\n                'voice_name': 'Microsoft Hortense Desktop',\n                'rate': 0,\n                'volume': 100,\n                'target_latency_ms': 500\n            },\n            'silent_emergency': {\n                'enabled': True,\n                'target_latency_ms': 10\n            }\n        },\n        'advanced': {\n            'max_text_length': 1000,\n            'sample_rate': 22050,\n            'channels': 1\n        }\n    }\n    \n    try:\n        # Initialisation TTS\n        print(\"üîß Initialisation UnifiedTTSManager...\")\n        tts = UnifiedTTSManager(config)\n        print(\"‚úÖ TTS initialis√© avec succ√®s\")\n        \n        # Test synth√®se simple\n        test_text = \"Bonjour, ceci est un test de synth√®se vocale SuperWhisper V6.\"\n        print(f\"\\nüó£Ô∏è Test synth√®se: '{test_text}'\")\n        \n        start_time = time.perf_counter()\n        result = await tts.synthesize(test_text)\n        latency_ms = (time.perf_counter() - start_time) * 1000\n        \n        print(f\"\\nüìä R√âSULTATS TTS:\")\n        print(f\"‚úÖ Succ√®s: {result.success}\")\n        print(f\"üîß Backend utilis√©: {result.backend_used}\")\n        print(f\"‚è±Ô∏è Latence: {result.latency_ms:.1f}ms\")\n        print(f\"‚è±Ô∏è Latence totale: {latency_ms:.1f}ms\")\n        \n        if result.audio_data:\n            print(f\"üîä Audio g√©n√©r√©: {len(result.audio_data)} bytes\")\n            \n            # Test lecture audio\n            try:\n                # Conversion bytes ‚Üí numpy pour lecture\n                audio_io = io.BytesIO(result.audio_data)\n                with wave.open(audio_io, 'rb') as wav_file:\n                    frames = wav_file.readframes(-1)\n                    sample_rate = wav_file.getframerate()\n                    channels = wav_file.getnchannels()\n                    sampwidth = wav_file.getsampwidth()\n                    \n                print(f\"üìä Format audio: {sample_rate}Hz, {channels}ch, {sampwidth*8}bit\")\n                \n                # Conversion pour sounddevice\n                if sampwidth == 2:  # 16-bit\n                    audio_np = np.frombuffer(frames, dtype=np.int16).astype(np.float32) / 32768.0\n                else:\n                    audio_np = np.frombuffer(frames, dtype=np.float32)\n                \n                if channels == 1:\n                    audio_np = audio_np.reshape(-1, 1)\n                \n                print(f\"üéµ Lecture audio ({len(audio_np)} samples)...\")\n                sd.play(audio_np, samplerate=sample_rate)\n                sd.wait()  # Attendre fin lecture\n                print(\"‚úÖ Audio jou√© avec succ√®s\")\n                \n                # Validation humaine\n                response = input(\"\\nüó£Ô∏è Avez-vous entendu une VRAIE VOIX (pas un bip) ? (o/n): \").lower().strip()\n                \n                if response == 'o':\n                    print(\"üéä SUCC√àS ! TTS Phase 3 fonctionne parfaitement\")\n                    return True\n                else:\n                    print(\"‚ùå √âCHEC ! Probl√®me audio TTS\")\n                    return False\n                    \n            except Exception as e:\n                print(f\"‚ùå Erreur lecture audio: {e}\")\n                return False\n        else:\n            print(\"‚ùå Aucun audio g√©n√©r√©\")\n            return False\n            \n    except Exception as e:\n        print(f\"‚ùå Erreur TTS: {e}\")\n        return False\n    finally:\n        if 'tts' in locals():\n            await tts.cleanup()\n\nif __name__ == \"__main__\":\n    print(\"üöÄ TEST TTS DIRECT - PHASE 3 VALID√âE\")\n    print(\"Performances record attendues: 29.5ms latence, 93.1% cache hit\")\n    \n    success = asyncio.run(test_tts_direct_phase3())\n    \n    if success:\n        print(\"\\nüéä TTS PHASE 3 VALID√â - PR√äT POUR PIPELINE\")\n        exit(0)\n    else:\n        print(\"\\n‚ùå TTS PHASE 3 √âCHEC - DIAGNOSTIC REQUIS\")\n        exit(1)\n 