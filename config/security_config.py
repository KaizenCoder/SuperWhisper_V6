#!/usr/bin/env python3
"""
Module de S√©curit√© LUXA SuperWhisper V6
Gestionnaire centralis√© pour authentification JWT et API Keys
Phase 1 - Sprint 1 : Impl√©mentation s√©curit√© de base

üö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE
"""

import os
import sys
import pathlib

# =============================================================================
# üöÄ PORTABILIT√â AUTOMATIQUE - EX√âCUTABLE DEPUIS N'IMPORTE O√ô
# =============================================================================
def _setup_portable_environment():
    """Configure l'environnement pour ex√©cution portable"""
    # D√©terminer le r√©pertoire racine du projet
    current_file = pathlib.Path(__file__).resolve()
    
    # Chercher le r√©pertoire racine (contient .git ou marqueurs projet)
    project_root = current_file
    for parent in current_file.parents:
        if any((parent / marker).exists() for marker in ['.git', 'pyproject.toml', 'requirements.txt', '.taskmaster']):
            project_root = parent
            break
    
    # Ajouter le projet root au Python path
    if str(project_root) not in sys.path:
        sys.path.insert(0, str(project_root))
    
    # Changer le working directory vers project root
    os.chdir(project_root)
    
    # Configuration GPU RTX 3090 obligatoire
    os.environ['CUDA_VISIBLE_DEVICES'] = '1'        # RTX 3090 24GB EXCLUSIVEMENT
    os.environ['CUDA_DEVICE_ORDER'] = 'PCI_BUS_ID'  # Ordre stable des GPU
    
    print(f"üéÆ GPU Configuration: RTX 3090 (CUDA:1) forc√©e")
    print(f"üìÅ Project Root: {project_root}")
    print(f"üíª Working Directory: {os.getcwd()}")
    
    return project_root

# Initialiser l'environnement portable
_PROJECT_ROOT = _setup_portable_environment()

# Maintenant imports normaux...

import hashlib
import secrets
import hmac
import json
import time
from datetime import datetime, timedelta
from typing import Optional, Dict, List
from pathlib import Path
import jwt
from cryptography.fernet import Fernet
import logging

logger = logging.getLogger(__name__)

class SecurityException(Exception):
    """Exception s√©curis√©e pour probl√®mes d'authentification"""
    pass

class SecurityConfig:
    """
    Gestionnaire de s√©curit√© centralis√© pour LUXA
    
    Fonctionnalit√©s:
    - G√©n√©ration/validation cl√©s API s√©curis√©es
    - Gestion tokens JWT avec expiration
    - Validation entr√©es audio/texte
    - Protection contre attaques timing
    - Chiffrement donn√©es sensibles
    """
    
    def __init__(self, config_path: str = "config/security_keys.json"):
        self.config_path = Path(config_path)
        self.config_path.parent.mkdir(exist_ok=True)
        
        # Configuration JWT
        self.jwt_secret = self._get_or_create_jwt_secret()
        self.jwt_algorithm = "HS256"
        self.jwt_expiration_hours = 24
        
        # Configuration API Keys
        self.api_keys_file = self.config_path.parent / "api_keys.hash"
        self._ensure_api_keys_file()
        
        # Configuration chiffrement
        self.cipher_key = self._get_or_create_cipher_key()
        self.cipher = Fernet(self.cipher_key)
        
        # Limites de s√©curit√©
        self.max_audio_size = 25 * 1024 * 1024  # 25MB
        self.max_text_length = 10000  # 10k caract√®res
        self.allowed_audio_types = {'.wav', '.mp3', '.flac', '.m4a', '.ogg'}
        
        logger.info("SecurityConfig initialis√© avec succ√®s")

    def _get_or_create_jwt_secret(self) -> str:
        """G√©n√®re ou r√©cup√®re la cl√© secr√®te JWT"""
        config_file = self.config_path.parent / "jwt_secret.key"
        
        if config_file.exists():
            with open(config_file, 'r') as f:
                return f.read().strip()
        else:
            # G√©n√®re une nouvelle cl√© secr√®te
            secret = secrets.token_urlsafe(64)
            with open(config_file, 'w') as f:
                f.write(secret)
            # Permissions s√©curis√©es (lecture seule propri√©taire)
            os.chmod(config_file, 0o600)
            logger.info("Nouvelle cl√© JWT g√©n√©r√©e")
            return secret
    
    def _get_or_create_cipher_key(self) -> bytes:
        """G√©n√®re ou r√©cup√®re la cl√© de chiffrement"""
        key_file = self.config_path.parent / "cipher.key"
        
        if key_file.exists():
            with open(key_file, 'rb') as f:
                return f.read()
        else:
            # G√©n√®re une nouvelle cl√© de chiffrement
            key = Fernet.generate_key()
            with open(key_file, 'wb') as f:
                f.write(key)
            os.chmod(key_file, 0o600)
            logger.info("Nouvelle cl√© de chiffrement g√©n√©r√©e")
            return key
    
    def _ensure_api_keys_file(self):
        """S'assure que le fichier des cl√©s API existe"""
        if not self.api_keys_file.exists():
            with open(self.api_keys_file, 'w') as f:
                f.write("# LUXA API Keys Hash Storage\n")
            os.chmod(self.api_keys_file, 0o600)
    
    def generate_api_key(self, name: str, description: str = "") -> str:
        """
        G√©n√®re une nouvelle cl√© API s√©curis√©e
        
        Args:
            name: Nom identifiant la cl√©
            description: Description optionnelle
        
        Returns:
            Cl√© API g√©n√©r√©e (format: luxa_xxxxx)
        """
        # G√©n√©ration cl√© avec pr√©fixe
        api_key = f"luxa_{secrets.token_urlsafe(32)}"
        
        # Hash s√©curis√© pour stockage
        key_hash = hashlib.sha256(api_key.encode()).hexdigest()
        
        # M√©tadonn√©es
        metadata = {
            'name': name,
            'description': description,
            'created': datetime.utcnow().isoformat(),
            'last_used': None,
            'usage_count': 0
        }
        
        # Stockage s√©curis√©
        with open(self.api_keys_file, 'a') as f:
            f.write(f"{key_hash}:{json.dumps(metadata)}\n")
        
        logger.info(f"Cl√© API g√©n√©r√©e pour '{name}'")
        return api_key
    
    def validate_api_key(self, api_key: str) -> Optional[Dict]:
        """
        Valide une cl√© API avec protection timing attack
        
        Args:
            api_key: Cl√© API √† valider
        
        Returns:
            M√©tadonn√©es si valide, None sinon
        """
        if not api_key or not api_key.startswith('luxa_'):
            return None
        
        # Hash de la cl√© fournie
        provided_hash = hashlib.sha256(api_key.encode()).hexdigest()
        
        try:
            with open(self.api_keys_file, 'r') as f:
                for line in f:
                    if ':' in line and not line.startswith('#'):
                        stored_hash, metadata_json = line.strip().split(':', 1)
                        
                        # Comparaison s√©curis√©e (constant-time)
                        if hmac.compare_digest(provided_hash, stored_hash):
                            metadata = json.loads(metadata_json)
                            
                            # Mise √† jour statistiques d'usage
                            self._update_key_usage(stored_hash, metadata)
                            
                            return metadata
        except Exception as e:
            logger.error(f"Erreur validation cl√© API: {e}")
        
        return None
    
    def _update_key_usage(self, key_hash: str, metadata: Dict):
        """Met √† jour les statistiques d'usage d'une cl√©"""
        metadata['last_used'] = datetime.utcnow().isoformat()
        metadata['usage_count'] = metadata.get('usage_count', 0) + 1
        
        # R√©√©√©criture du fichier (optimisation possible avec base de donn√©es)
        lines = []
        try:
            with open(self.api_keys_file, 'r') as f:
                for line in f:
                    if ':' in line and not line.startswith('#'):
                        stored_hash, _ = line.strip().split(':', 1)
                        if stored_hash == key_hash:
                            lines.append(f"{key_hash}:{json.dumps(metadata)}\n")
                        else:
                            lines.append(line)
                    else:
                        lines.append(line)
            
            with open(self.api_keys_file, 'w') as f:
                f.writelines(lines)
                
        except Exception as e:
            logger.error(f"Erreur mise √† jour usage cl√©: {e}")
    
    def generate_jwt_token(self, user_data: Dict, expires_hours: int = None) -> str:
        """
        G√©n√®re un token JWT s√©curis√©
        
        Args:
            user_data: Donn√©es utilisateur √† inclure
            expires_hours: Dur√©e d'expiration (d√©faut: 24h)
        
        Returns:
            Token JWT sign√©
        """
        expires_hours = expires_hours or self.jwt_expiration_hours
        
        payload = {
            'user_data': user_data,
            'exp': datetime.utcnow() + timedelta(hours=expires_hours),
            'iat': datetime.utcnow(),
            'iss': 'luxa-superwhisper-v6',
            'jti': secrets.token_hex(16)  # Unique token ID
        }
        
        token = jwt.encode(payload, self.jwt_secret, algorithm=self.jwt_algorithm)
        logger.info(f"Token JWT g√©n√©r√© (expires: {expires_hours}h)")
        
        return token
    
    def validate_jwt_token(self, token: str) -> Dict:
        """
        Valide un token JWT
        
        Args:
            token: Token JWT √† valider
        
        Returns:
            Payload d√©cod√© si valide
        
        Raises:
            SecurityException: Si token invalide/expir√©
        """
        try:
            payload = jwt.decode(
                token, 
                self.jwt_secret, 
                algorithms=[self.jwt_algorithm],
                options={"verify_exp": True, "verify_iat": True}
            )
            
            return payload
            
        except jwt.ExpiredSignatureError:
            raise SecurityException("Token JWT expir√©")
        except jwt.InvalidTokenError as e:
            raise SecurityException(f"Token JWT invalide: {str(e)}")
    
    def validate_audio_input(self, audio_data: bytes, filename: str = "") -> Dict:
        """
        Validation s√©curis√©e des entr√©es audio
        
        Args:
            audio_data: Donn√©es audio en bytes
            filename: Nom du fichier (optionnel)
        
        Returns:
            Dict avec r√©sultat validation
        
        Raises:
            SecurityException: Si donn√©es non s√©curis√©es
        """
        validation_result = {
            'valid': False,
            'size_bytes': len(audio_data),
            'filename': filename,
            'checks': {}
        }
        
        # V√©rification taille
        if len(audio_data) > self.max_audio_size:
            raise SecurityException(f"Fichier trop volumineux: {len(audio_data)} > {self.max_audio_size}")
        validation_result['checks']['size'] = True
        
        # V√©rification extension
        if filename:
            ext = Path(filename).suffix.lower()
            if ext not in self.allowed_audio_types:
                raise SecurityException(f"Type de fichier non autoris√©: {ext}")
            validation_result['checks']['extension'] = True
        
        # V√©rification magic bytes (signatures de fichiers)
        magic_bytes_check = self._check_audio_magic_bytes(audio_data)
        validation_result['checks']['magic_bytes'] = magic_bytes_check
        
        # D√©tection patterns suspects (headers ex√©cutables, scripts)
        malware_check = self._check_malware_patterns(audio_data)
        validation_result['checks']['malware'] = malware_check
        
        if not malware_check:
            raise SecurityException("Patterns suspects d√©tect√©s dans les donn√©es audio")
        
        validation_result['valid'] = True
        logger.info(f"Validation audio r√©ussie: {len(audio_data)} bytes")
        
        return validation_result
    
    def _check_audio_magic_bytes(self, data: bytes) -> bool:
        """V√©rifie les signatures de fichiers audio valides"""
        if len(data) < 12:
            return False
        
        # Signatures connues pour formats audio
        audio_signatures = [
            b'RIFF',        # WAV
            b'ID3',         # MP3 avec ID3
            b'\xff\xfb',    # MP3
            b'\xff\xf3',    # MP3
            b'\xff\xf2',    # MP3
            b'fLaC',        # FLAC
            b'OggS',        # OGG
            b'ftypM4A',     # M4A
        ]
        
        for signature in audio_signatures:
            if data.startswith(signature) or signature in data[:12]:
                return True
        
        return False
    
    def _check_malware_patterns(self, data: bytes) -> bool:
        """D√©tecte les patterns suspects (ex√©cutables, scripts)"""
        # Patterns d'ex√©cutables Windows/Linux
        malware_patterns = [
            b'MZ',          # PE executable
            b'\x7fELF',     # ELF executable
            b'#!/bin/',     # Script shell
            b'<script',     # Script HTML/JS
            b'javascript:', # JavaScript
            b'powershell',  # PowerShell
            b'cmd.exe',     # Windows CMD
        ]
        
        data_lower = data[:1024].lower()  # Check premier KB
        
        for pattern in malware_patterns:
            if pattern.lower() in data_lower:
                logger.warning(f"Pattern suspect d√©tect√©: {pattern}")
                return False
        
        return True
    
    def sanitize_text_input(self, text: str) -> str:
        """
        Nettoie et valide les entr√©es texte
        
        Args:
            text: Texte √† nettoyer
        
        Returns:
            Texte nettoy√© et s√©curis√©
        """
        if len(text) > self.max_text_length:
            raise SecurityException(f"Texte trop long: {len(text)} > {self.max_text_length}")
        
        # Suppression caract√®res de contr√¥le dangereux
        cleaned = ''.join(char for char in text if ord(char) >= 32 or char in '\n\r\t')
        
        # √âchappement basique pour pr√©venir injection
        cleaned = cleaned.replace('<', '&lt;').replace('>', '&gt;')
        
        return cleaned
    
    def encrypt_sensitive_data(self, data: str) -> str:
        """Chiffre des donn√©es sensibles"""
        encrypted = self.cipher.encrypt(data.encode())
        return encrypted.decode('latin-1')
    
    def decrypt_sensitive_data(self, encrypted_data: str) -> str:
        """D√©chiffre des donn√©es sensibles"""
        decrypted = self.cipher.decrypt(encrypted_data.encode('latin-1'))
        return decrypted.decode()
    
    def revoke_api_key(self, api_key: str) -> bool:
        """
        R√©voque une cl√© API
        
        Args:
            api_key: Cl√© √† r√©voquer
        
        Returns:
            True si r√©voqu√©e avec succ√®s
        """
        key_hash = hashlib.sha256(api_key.encode()).hexdigest()
        
        try:
            lines = []
            revoked = False
            
            with open(self.api_keys_file, 'r') as f:
                for line in f:
                    if ':' in line and not line.startswith('#'):
                        stored_hash, metadata_json = line.strip().split(':', 1)
                        if stored_hash == key_hash:
                            revoked = True
                            continue  # Skip cette ligne (suppression)
                    lines.append(line)
            
            if revoked:
                with open(self.api_keys_file, 'w') as f:
                    f.writelines(lines)
                logger.info("Cl√© API r√©voqu√©e avec succ√®s")
            
            return revoked
            
        except Exception as e:
            logger.error(f"Erreur r√©vocation cl√© API: {e}")
            return False
    
    def list_api_keys(self) -> List[Dict]:
        """Liste toutes les cl√©s API avec m√©tadonn√©es (sans les cl√©s)"""
        keys_info = []
        
        try:
            with open(self.api_keys_file, 'r') as f:
                for line in f:
                    if ':' in line and not line.startswith('#'):
                        key_hash, metadata_json = line.strip().split(':', 1)
                        metadata = json.loads(metadata_json)
                        metadata['key_hash'] = key_hash[:8] + "..."  # Partial hash pour identification
                        keys_info.append(metadata)
        except Exception as e:
            logger.error(f"Erreur listing cl√©s API: {e}")
        
        return keys_info

# Instance globale singleton
_security_instance = None

def get_security_config() -> SecurityConfig:
    """R√©cup√®re l'instance singleton du gestionnaire de s√©curit√©"""
    global _security_instance
    if _security_instance is None:
        _security_instance = SecurityConfig()
    return _security_instance
