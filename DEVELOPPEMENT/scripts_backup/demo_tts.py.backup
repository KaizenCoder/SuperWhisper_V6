#!/usr/bin/env python3
"""
D√©monstration TTS - SuperWhisper V6
Script de test manuel avec g√©n√©ration de fichier audio pour √©coute r√©elle
üéµ Validation qualit√© audio en conditions r√©elles
"""

import os
import sys
import asyncio
import time
from pathlib import Path

# =============================================================================
# üö® CONFIGURATION CRITIQUE GPU - RTX 3090 UNIQUEMENT 
# =============================================================================
os.environ['CUDA_VISIBLE_DEVICES'] = '1'
os.environ['CUDA_DEVICE_ORDER'] = 'PCI_BUS_ID'
os.environ['PYTORCH_CUDA_ALLOC_CONF'] = 'max_split_size_mb:1024'

print("üéÆ GPU Configuration: RTX 3090 (CUDA:1) forc√©e")
print(f"üîí CUDA_VISIBLE_DEVICES: {os.environ.get('CUDA_VISIBLE_DEVICES')}")

# Import du syst√®me TTS
try:
    # Ajout du chemin du projet au sys.path
    project_root = Path(__file__).parent.parent
    if str(project_root) not in sys.path:
        sys.path.insert(0, str(project_root))
    
    from TTS.tts_manager import UnifiedTTSManager
    from TTS.utils_audio import is_valid_wav, get_wav_info
    import yaml
    TTS_AVAILABLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è Syst√®me TTS non disponible: {e}")
    TTS_AVAILABLE = False

async def demo_tts_interactive():
    """D√©monstration interactive du TTS avec g√©n√©ration de fichier audio"""
    print("\n" + "="*80)
    print("üéµ D√âMONSTRATION TTS SUPERWHISPER V6")
    print("="*80)
    print("üöÄ Test manuel avec g√©n√©ration de fichier audio pour √©coute r√©elle")
    print()
    
    if not TTS_AVAILABLE:
        print("‚ùå Syst√®me TTS non disponible")
        return
    
    try:
        # Initialisation du TTS Manager
        print("üîß Initialisation du TTS Manager...")
        config_path = Path("config/tts.yaml")
        with open(config_path, 'r', encoding='utf-8') as f:
            config = yaml.safe_load(f)
        
        start_time = time.perf_counter()
        tts_manager = UnifiedTTSManager(config)
        init_time = (time.perf_counter() - start_time) * 1000
        
        print(f"‚úÖ TTS Manager initialis√© en {init_time:.1f}ms")
        print()
        
        # Textes de d√©monstration pr√©d√©finis
        demo_texts = {
            '1': "Bonjour ! Bienvenue dans la d√©monstration de SuperWhisper V6.",
            '2': "Ce syst√®me utilise des technologies avanc√©es d'intelligence artificielle pour offrir une synth√®se vocale de haute qualit√© avec des performances optimis√©es.",
            '3': """SuperWhisper V6 Phase 3 int√®gre plusieurs optimisations majeures : 
                 le binding Python natif pour r√©duire la latence, 
                 un cache LRU intelligent pour les textes r√©currents, 
                 le chunking s√©mantique pour les textes longs, 
                 et une optimisation GPU d√©di√©e pour maximiser les performances.""",
            '4': """L'intelligence artificielle conversationnelle repr√©sente l'avenir des interactions homme-machine. 
                 SuperWhisper V6 s'inscrit dans cette dynamique en proposant une solution compl√®te et optimis√©e 
                 pour les interactions vocales. Le syst√®me repose sur une architecture en pipeline comprenant 
                 trois composants principaux : reconnaissance vocale, traitement du langage naturel et synth√®se vocale 
                 multi-backend avec fallback intelligent. Les optimisations Phase 3 permettent d'atteindre 
                 des performances exceptionnelles tout en maintenant une qualit√© audio remarquable.""",
            '5': "Test de caract√®res sp√©ciaux : caf√©, na√Øve, 123 euros, @#%&*()[]{}|\\:;\"'<>,.?/~`",
        }
        
        while True:
            print("üéµ MENU D√âMONSTRATION TTS")
            print("-" * 40)
            print("Choisissez une option :")
            print()
            print("üìù TEXTES PR√âD√âFINIS:")
            for key, text in demo_texts.items():
                preview = text[:60] + "..." if len(text) > 60 else text
                print(f"   {key}. {preview}")
            print()
            print("‚å®Ô∏è  SAISIE PERSONNALIS√âE:")
            print("   c. Saisir un texte personnalis√©")
            print("   q. Quitter")
            print()
            
            choice = input("Votre choix : ").strip().lower()
            
            if choice == 'q':
                print("üëã Au revoir !")
                break
            elif choice == 'c':
                print("\nüìù Saisie personnalis√©e:")
                print("Entrez votre texte (ou 'annuler' pour revenir au menu) :")
                custom_text = input("> ").strip()
                if custom_text.lower() == 'annuler' or not custom_text:
                    continue
                text_to_synthesize = custom_text
                demo_name = "personnalise"
            elif choice in demo_texts:
                text_to_synthesize = demo_texts[choice]
                demo_name = f"demo_{choice}"
            else:
                print("‚ùå Choix invalide. Veuillez r√©essayer.")
                continue
            
            # Synth√®se TTS
            print(f"\nüîÑ Synth√®se en cours...")
            print(f"üìù Texte ({len(text_to_synthesize)} caract√®res):")
            print(f"   {text_to_synthesize[:100]}{'...' if len(text_to_synthesize) > 100 else ''}")
            print()
            
            try:
                # Mesure de performance
                start_synthesis = time.perf_counter()
                tts_result = await tts_manager.synthesize(text_to_synthesize)
                synthesis_time = (time.perf_counter() - start_synthesis) * 1000
                
                # Extraction des donn√©es audio
                if hasattr(tts_result, 'audio_data'):
                    wav_bytes = tts_result.audio_data
                else:
                    wav_bytes = tts_result
                
                # Validation du format
                is_valid = is_valid_wav(wav_bytes)
                audio_info = get_wav_info(wav_bytes)
                
                # G√©n√©ration du fichier de sortie
                timestamp = time.strftime("%Y%m%d_%H%M%S")
                output_filename = f"demo_tts_{demo_name}_{timestamp}.wav"
                output_path = Path(output_filename)
                
                with open(output_path, "wb") as f:
                    f.write(wav_bytes)
                
                # Affichage des r√©sultats
                print("‚úÖ SYNTH√àSE R√âUSSIE !")
                print("-" * 40)
                print(f"‚ö° Temps de synth√®se: {synthesis_time:.1f}ms")
                print(f"üìä Taille audio: {len(wav_bytes):,} bytes")
                print(f"üéµ Dur√©e audio: {audio_info.get('duration_ms', 0):.0f}ms")
                print(f"‚úÖ Format WAV valide: {is_valid}")
                print(f"üíæ Fichier g√©n√©r√©: {output_path}")
                print()
                
                # Calcul de m√©triques
                chars_per_second = len(text_to_synthesize) / (synthesis_time / 1000)
                print(f"üìà M√âTRIQUES:")
                print(f"   D√©bit: {chars_per_second:.1f} caract√®res/seconde")
                
                # Estimation du backend utilis√©
                if synthesis_time < 10:
                    backend_used = "Cache (hit)"
                elif synthesis_time < 500:
                    backend_used = "Piper Native"
                elif synthesis_time < 1500:
                    backend_used = "Piper CLI"
                else:
                    backend_used = "SAPI/Fallback"
                
                print(f"   Backend estim√©: {backend_used}")
                print()
                
                # Instructions d'√©coute
                print("üéß √âCOUTE DU R√âSULTAT:")
                print(f"   1. Ouvrez le fichier: {output_path}")
                print("   2. √âcoutez la qualit√© audio")
                print("   3. V√©rifiez la prononciation et la fluidit√©")
                print("   4. Validez que le texte est correctement synth√©tis√©")
                print()
                
                # Analyse automatique de la qualit√©
                if audio_info.get('duration_ms', 0) > 0:
                    expected_duration = len(text_to_synthesize) * 60  # ~60ms par caract√®re
                    duration_ratio = audio_info['duration_ms'] / expected_duration
                    
                    if 0.5 <= duration_ratio <= 2.0:
                        quality_status = "‚úÖ Dur√©e coh√©rente"
                    else:
                        quality_status = f"‚ö†Ô∏è Dur√©e suspecte (ratio: {duration_ratio:.1f})"
                    
                    print(f"üîç ANALYSE AUTOMATIQUE:")
                    print(f"   {quality_status}")
                    print()
                
            except Exception as e:
                print(f"‚ùå Erreur lors de la synth√®se: {e}")
                print()
            
            # Pause avant le prochain test
            input("Appuyez sur Entr√©e pour continuer...")
            print("\n" + "="*80)
        
        # Nettoyage
        await tts_manager.cleanup()
        
    except Exception as e:
        print(f"‚ùå Erreur d√©monstration: {e}")
        import traceback
        traceback.print_exc()

async def demo_tts_batch():
    """D√©monstration batch avec g√©n√©ration de plusieurs fichiers de test"""
    print("\n" + "="*80)
    print("üéµ D√âMONSTRATION TTS BATCH - G√âN√âRATION MULTIPLE")
    print("="*80)
    
    if not TTS_AVAILABLE:
        print("‚ùå Syst√®me TTS non disponible")
        return
    
    # Textes de test vari√©s
    test_cases = [
        ("court", "Bonjour, test de synth√®se vocale."),
        ("moyen", "SuperWhisper V6 utilise l'intelligence artificielle pour offrir une synth√®se vocale de haute qualit√©."),
        ("long", """L'intelligence artificielle conversationnelle repr√©sente une r√©volution dans les interactions homme-machine. 
                   SuperWhisper V6 int√®gre des technologies de pointe pour offrir une exp√©rience utilisateur exceptionnelle 
                   avec des temps de r√©ponse optimis√©s et une qualit√© audio remarquable."""),
        ("numerique", "Les chiffres : 1, 2, 3, 10, 100, 1000, 2024, 3.14159, 50%, ‚Ç¨123.45"),
        ("ponctuation", "Test de ponctuation : virgule, point-virgule ; point d'exclamation ! point d'interrogation ? guillemets ¬´ fran√ßais ¬ª et \"anglais\"."),
        ("accents", "Caf√©, na√Øve, c≈ìur, No√´l, √©t√©, fran√ßais, ch√¢teau, h√¥tel, th√©√¢tre, cr√©√©."),
    ]
    
    try:
        # Initialisation
        config_path = Path("config/tts.yaml")
        with open(config_path, 'r', encoding='utf-8') as f:
            config = yaml.safe_load(f)
        
        tts_manager = UnifiedTTSManager(config)
        print("‚úÖ TTS Manager initialis√©")
        
        timestamp = time.strftime("%Y%m%d_%H%M%S")
        results = []
        
        print(f"\nüîÑ G√©n√©ration de {len(test_cases)} fichiers de test...")
        
        for i, (test_name, text) in enumerate(test_cases, 1):
            print(f"\nüìù Test {i}/{len(test_cases)}: {test_name}")
            print(f"   Texte: {text[:50]}{'...' if len(text) > 50 else ''}")
            
            try:
                # Synth√®se
                start_time = time.perf_counter()
                tts_result = await tts_manager.synthesize(text)
                synthesis_time = (time.perf_counter() - start_time) * 1000
                
                # Extraction audio
                if hasattr(tts_result, 'audio_data'):
                    wav_bytes = tts_result.audio_data
                else:
                    wav_bytes = tts_result
                
                # Sauvegarde
                filename = f"demo_batch_{test_name}_{timestamp}.wav"
                with open(filename, "wb") as f:
                    f.write(wav_bytes)
                
                # Validation
                is_valid = is_valid_wav(wav_bytes)
                audio_info = get_wav_info(wav_bytes)
                
                results.append({
                    'name': test_name,
                    'filename': filename,
                    'synthesis_time': synthesis_time,
                    'audio_size': len(wav_bytes),
                    'duration_ms': audio_info.get('duration_ms', 0),
                    'valid': is_valid,
                    'text_length': len(text)
                })
                
                print(f"   ‚úÖ G√©n√©r√©: {filename} ({synthesis_time:.1f}ms)")
                
            except Exception as e:
                print(f"   ‚ùå Erreur: {e}")
                results.append({
                    'name': test_name,
                    'filename': None,
                    'error': str(e)
                })
        
        # Rapport final
        print("\n" + "="*60)
        print("üìä RAPPORT G√âN√âRATION BATCH")
        print("="*60)
        
        successful = [r for r in results if r.get('filename')]
        failed = [r for r in results if not r.get('filename')]
        
        print(f"‚úÖ R√©ussis: {len(successful)}/{len(test_cases)}")
        print(f"‚ùå √âchecs: {len(failed)}")
        print()
        
        if successful:
            print("üìÅ FICHIERS G√âN√âR√âS:")
            total_time = sum(r['synthesis_time'] for r in successful)
            total_chars = sum(r['text_length'] for r in successful)
            
            for result in successful:
                print(f"   {result['filename']}")
                print(f"      {result['synthesis_time']:.1f}ms | {result['audio_size']:,} bytes | {result['duration_ms']:.0f}ms audio")
            
            print(f"\nüìà STATISTIQUES:")
            print(f"   Temps total: {total_time:.1f}ms")
            print(f"   Caract√®res total: {total_chars}")
            print(f"   D√©bit moyen: {total_chars/(total_time/1000):.1f} chars/s")
        
        if failed:
            print("\n‚ùå √âCHECS:")
            for result in failed:
                print(f"   {result['name']}: {result.get('error', 'Erreur inconnue')}")
        
        print(f"\nüéß Pour tester la qualit√© audio, √©coutez les fichiers g√©n√©r√©s.")
        
        # Nettoyage
        await tts_manager.cleanup()
        
    except Exception as e:
        print(f"‚ùå Erreur d√©monstration batch: {e}")

async def main():
    """Point d'entr√©e principal"""
    print("üéµ SuperWhisper V6 - D√©monstration TTS")
    print("üöÄ Test manuel avec g√©n√©ration de fichiers audio")
    
    print("\nChoisissez le mode de d√©monstration :")
    print("1. Interactif (saisie manuelle)")
    print("2. Batch (g√©n√©ration automatique)")
    print("3. Les deux")
    
    choice = input("\nVotre choix (1/2/3) : ").strip()
    
    if choice == '1':
        await demo_tts_interactive()
    elif choice == '2':
        await demo_tts_batch()
    elif choice == '3':
        await demo_tts_batch()
        print("\n" + "="*80)
        await demo_tts_interactive()
    else:
        print("‚ùå Choix invalide")

if __name__ == "__main__":
    asyncio.run(main()) 