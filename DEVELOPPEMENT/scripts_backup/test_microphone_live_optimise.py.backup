#!/usr/bin/env python3
"""
Test Microphone Live - Solution STT Optimis√©e
üö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE
üé§ TEST CRITIQUE: Conditions r√©elles microphone live
‚ö†Ô∏è ATTENTION: Ce test r√©v√®le les VRAIES performances (vs fichier pr√©-enregistr√©)
"""

import os
import sys

# =============================================================================
# üö® CONFIGURATION CRITIQUE GPU - RTX 3090 UNIQUEMENT 
# =============================================================================
os.environ['CUDA_VISIBLE_DEVICES'] = '1'        # RTX 3090 24GB EXCLUSIVEMENT
os.environ['CUDA_DEVICE_ORDER'] = 'PCI_BUS_ID'  # Ordre stable des GPU
os.environ['PYTORCH_CUDA_ALLOC_CONF'] = 'max_split_size_mb:1024'  # Optimisation m√©moire

print("üéÆ GPU Configuration: RTX 3090 (CUDA:1) forc√©e")
print(f"üîí CUDA_VISIBLE_DEVICES: {os.environ.get('CUDA_VISIBLE_DEVICES')}")

# Ajout du chemin STT au PYTHONPATH
script_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.dirname(script_dir)
sys.path.insert(0, project_root)

import asyncio
import time
import json
import numpy as np
import torch
import sounddevice as sd
import wave
from pathlib import Path
from datetime import datetime
import logging
import threading
import queue

# Configuration logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def validate_rtx3090_configuration():
    """Validation obligatoire de la configuration RTX 3090"""
    if not torch.cuda.is_available():
        raise RuntimeError("üö´ CUDA non disponible - RTX 3090 requise")
    
    cuda_devices = os.environ.get('CUDA_VISIBLE_DEVICES', '')
    if cuda_devices != '1':
        raise RuntimeError(f"üö´ CUDA_VISIBLE_DEVICES='{cuda_devices}' incorrect - doit √™tre '1'")
    
    gpu_memory = torch.cuda.get_device_properties(0).total_memory / 1024**3
    if gpu_memory < 20:  # RTX 3090 = ~24GB
        raise RuntimeError(f"üö´ GPU ({gpu_memory:.1f}GB) trop petite - RTX 3090 requise")
    
    gpu_name = torch.cuda.get_device_name(0)
    print(f"‚úÖ RTX 3090 valid√©e: {gpu_name} ({gpu_memory:.1f}GB)")

def list_audio_devices():
    """Liste les p√©riph√©riques audio disponibles"""
    print(f"\nüé§ P√âRIPH√âRIQUES AUDIO DISPONIBLES")
    print("-" * 60)
    
    devices = sd.query_devices()
    input_devices = []
    
    for i, device in enumerate(devices):
        if device['max_input_channels'] > 0:
            input_devices.append((i, device))
            print(f"   [{i}] {device['name']}")
            print(f"       Canaux: {device['max_input_channels']}, SR: {device['default_samplerate']:.0f}Hz")
    
    return input_devices

def select_microphone():
    """S√©lection interactive du microphone"""
    devices = list_audio_devices()
    
    if not devices:
        raise RuntimeError("‚ùå Aucun p√©riph√©rique d'entr√©e audio trouv√©")
    
    print(f"\nüéØ S√âLECTION MICROPHONE")
    print("-" * 40)
    
    while True:
        try:
            choice = input(f"Choisissez le microphone [0-{len(devices)-1}] ou ENTER pour d√©faut: ").strip()
            
            if choice == "":
                device_id = None
                device_name = "D√©faut syst√®me"
                break
            else:
                device_id = int(choice)
                if 0 <= device_id < len(devices):
                    device_name = devices[device_id][1]['name']
                    break
                else:
                    print(f"‚ùå Choix invalide. Entrez un nombre entre 0 et {len(devices)-1}")
        except ValueError:
            print("‚ùå Veuillez entrer un nombre valide")
    
    print(f"‚úÖ Microphone s√©lectionn√©: {device_name}")
    return device_id, device_name

class MicrophoneRecorder:
    """Enregistreur microphone avec buffer circulaire"""
    
    def __init__(self, device_id=None, sample_rate=16000, channels=1):
        self.device_id = device_id
        self.sample_rate = sample_rate
        self.channels = channels
        self.is_recording = False
        self.audio_queue = queue.Queue()
        self.recorded_data = []
        
    def audio_callback(self, indata, frames, time, status):
        """Callback pour l'enregistrement audio"""
        if status:
            print(f"‚ö†Ô∏è Status audio: {status}")
        
        if self.is_recording:
            # Conversion en float32 et mono
            audio_data = indata[:, 0] if indata.shape[1] > 1 else indata.flatten()
            self.audio_queue.put(audio_data.copy())
            self.recorded_data.append(audio_data.copy())
    
    def start_recording(self):
        """D√©marre l'enregistrement"""
        self.is_recording = True
        self.recorded_data = []
        
        self.stream = sd.InputStream(
            device=self.device_id,
            channels=self.channels,
            samplerate=self.sample_rate,
            callback=self.audio_callback,
            blocksize=1024,
            dtype=np.float32
        )
        self.stream.start()
        print("üî¥ Enregistrement d√©marr√©...")
    
    def stop_recording(self):
        """Arr√™te l'enregistrement"""
        self.is_recording = False
        if hasattr(self, 'stream'):
            self.stream.stop()
            self.stream.close()
        
        # Concat√©nation des donn√©es
        if self.recorded_data:
            full_audio = np.concatenate(self.recorded_data)
            print(f"‚èπÔ∏è Enregistrement arr√™t√©. Dur√©e: {len(full_audio)/self.sample_rate:.2f}s")
            return full_audio
        else:
            print("‚ö†Ô∏è Aucune donn√©e audio enregistr√©e")
            return np.array([])
    
    def save_recording(self, audio_data, filename):
        """Sauvegarde l'enregistrement en WAV"""
        if len(audio_data) == 0:
            print("‚ö†Ô∏è Pas de donn√©es √† sauvegarder")
            return False
        
        try:
            # Normalisation et conversion en int16
            audio_normalized = np.clip(audio_data, -1.0, 1.0)
            audio_int16 = (audio_normalized * 32767).astype(np.int16)
            
            with wave.open(filename, 'wb') as wav_file:
                wav_file.setnchannels(self.channels)
                wav_file.setsampwidth(2)  # 16-bit
                wav_file.setframerate(self.sample_rate)
                wav_file.writeframes(audio_int16.tobytes())
            
            print(f"üíæ Enregistrement sauvegard√©: {filename}")
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur sauvegarde: {e}")
            return False

async def test_backend_avec_microphone(audio_data: np.ndarray, duration: float):
    """Test du backend optimis√© avec audio microphone"""
    print(f"\n‚öôÔ∏è TEST BACKEND OPTIMIS√â - MICROPHONE LIVE")
    print("-" * 50)
    
    try:
        from STT.backends.prism_stt_backend_optimized import OptimizedPrismSTTBackend
        
        config = {
            'model': 'large-v2',
            'compute_type': 'float16',
            'language': 'fr',  # For√ßage fran√ßais
            'beam_size': 10,   # Beam search optimis√©
            'vad_filter': True,
            'vad_parameters': {
                'threshold': 0.2,
                'min_speech_duration_ms': 50,
                'max_speech_duration_s': float('inf'),
                'min_silence_duration_ms': 2000,
                'speech_pad_ms': 800
            }
        }
        
        print("üöÄ Initialisation backend optimis√©...")
        backend = OptimizedPrismSTTBackend(config)
        
        print("üéØ Transcription audio microphone...")
        start_time = time.perf_counter()
        
        result = await backend.transcribe(audio_data)
        
        processing_time = time.perf_counter() - start_time
        
        if result['success']:
            print(f"\nüìù R√âSULTATS TRANSCRIPTION MICROPHONE:")
            print(f"   Texte: \"{result['text']}\"")
            print(f"   Confiance: {result['confidence']:.3f}")
            print(f"   Segments: {len(result['segments'])}")
            print(f"   Temps traitement: {processing_time:.2f}s")
            print(f"   RTF: {result['rtf']:.3f}")
            print(f"   Mots transcrits: {len(result['text'].split())}")
            
            return result
        else:
            print(f"‚ùå Transcription √©chou√©e: {result.get('error', 'Erreur inconnue')}")
            return None
            
    except Exception as e:
        print(f"‚ùå Erreur test backend: {e}")
        import traceback
        traceback.print_exc()
        return None

async def test_post_processor_microphone(transcription: str):
    """Test du post-processeur avec transcription microphone"""
    print(f"\nüß™ TEST POST-PROCESSEUR - TRANSCRIPTION MICROPHONE")
    print("-" * 50)
    
    try:
        from STT.stt_postprocessor import STTPostProcessor
        
        processor = STTPostProcessor()
        
        print(f"üìù Texte original: \"{transcription}\"")
        
        start_time = time.time()
        processed, metrics = processor.process(transcription, 0.8)
        processing_time = (time.time() - start_time) * 1000  # ms
        
        print(f"üìù Texte corrig√©: \"{processed}\"")
        print(f"   Corrections appliqu√©es: {metrics['corrections_applied']}")
        print(f"   Boost confiance: +{metrics['confidence_boost']:.3f}")
        print(f"   Temps traitement: {processing_time:.1f}ms")
        
        return processed, metrics
        
    except Exception as e:
        print(f"‚ùå Erreur post-processeur: {e}")
        return transcription, {}

def calculate_wer(reference: str, hypothesis: str):
    """Calcul du Word Error Rate (WER)"""
    ref_words = reference.lower().split()
    hyp_words = hypothesis.lower().split()
    
    # Matrice de distance d'√©dition
    d = np.zeros((len(ref_words) + 1, len(hyp_words) + 1))
    
    for i in range(len(ref_words) + 1):
        d[i][0] = i
    for j in range(len(hyp_words) + 1):
        d[0][j] = j
    
    for i in range(1, len(ref_words) + 1):
        for j in range(1, len(hyp_words) + 1):
            if ref_words[i-1] == hyp_words[j-1]:
                d[i][j] = d[i-1][j-1]
            else:
                d[i][j] = min(
                    d[i-1][j] + 1,      # deletion
                    d[i][j-1] + 1,      # insertion
                    d[i-1][j-1] + 1     # substitution
                )
    
    wer = d[len(ref_words)][len(hyp_words)] / len(ref_words) * 100
    return wer, int(d[len(ref_words)][len(hyp_words)])

def generate_microphone_report(device_name: str, audio_duration: float, backend_result: dict, 
                             post_processed: str, metrics: dict, reference_text: str = None):
    """G√©n√©ration du rapport de test microphone"""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    report_file = f"test_microphone_live_optimise_report_{timestamp}.json"
    
    # Calcul WER si texte de r√©f√©rence fourni
    wer_data = {}
    if reference_text and backend_result:
        wer, errors = calculate_wer(reference_text, backend_result.get('text', ''))
        wer_data = {
            'reference_text': reference_text,
            'wer_percentage': wer,
            'edit_distance': errors,
            'reference_words': len(reference_text.split()),
            'transcribed_words': len(backend_result.get('text', '').split())
        }
    
    report = {
        'timestamp': timestamp,
        'test_type': 'microphone_live_reel',
        'warning': 'R√©sultats R√âELS - conditions microphone live',
        'microphone_info': {
            'device_name': device_name,
            'duration_seconds': audio_duration,
            'sample_rate': 16000,
            'channels': 1
        },
        'gpu_config': {
            'device': torch.cuda.get_device_name(0),
            'memory_gb': torch.cuda.get_device_properties(0).total_memory / 1024**3,
            'cuda_version': torch.version.cuda
        },
        'backend_result': backend_result,
        'post_processing': {
            'original_text': backend_result.get('text', '') if backend_result else '',
            'processed_text': post_processed,
            'metrics': metrics
        },
        'performance': {
            'rtf': backend_result.get('rtf', 0) if backend_result else 0,
            'processing_time': backend_result.get('processing_time', 0) if backend_result else 0,
            'confidence': backend_result.get('confidence', 0) if backend_result else 0
        },
        'wer_analysis': wer_data
    }
    
    # Sauvegarde rapport
    with open(report_file, 'w', encoding='utf-8') as f:
        json.dump(report, f, indent=2, ensure_ascii=False)
    
    print(f"\nüìÑ Rapport microphone sauvegard√©: {report_file}")
    return report_file

def display_test_instructions():
    """Affiche les instructions pour le test"""
    print(f"\nüìã INSTRUCTIONS TEST MICROPHONE LIVE")
    print("=" * 60)
    print("üéØ OBJECTIF: Tester la solution optimis√©e en conditions r√©elles")
    print("üé§ PROC√âDURE:")
    print("   1. S√©lectionnez votre microphone")
    print("   2. Pr√©parez le texte √† lire (fourni ci-dessous)")
    print("   3. Appuyez sur ENTER pour d√©marrer l'enregistrement")
    print("   4. Lisez le texte clairement au microphone")
    print("   5. Appuyez sur ENTER pour arr√™ter")
    print("   6. Attendez la transcription et l'analyse")
    print()
    print("‚ö†Ô∏è IMPORTANT:")
    print("   ‚Üí Parlez naturellement (pas trop lentement)")
    print("   ‚Üí Gardez une distance normale du microphone")
    print("   ‚Üí Environnement normal (pas de silence parfait)")
    print("   ‚Üí Ce test r√©v√®le les VRAIES performances")
    print()

def get_test_text():
    """Retourne le texte de test √† lire"""
    return """Bonjour, ceci est un test de validation pour SuperWhisper version 6. 
Je vais maintenant √©noncer plusieurs phrases de complexit√© croissante pour √©valuer la pr√©cision de transcription.
Premi√®rement, des mots simples : chat, chien, maison, voiture, ordinateur, t√©l√©phone.
Deuxi√®mement, les phrases courtes : il fait beau aujourd'hui, le caf√© est d√©licieux, j'aime la musique classique.
Troisi√®mement, des phrases plus complexes : l'intelligence artificielle transforme notre mani√®re de travailler et communiquer dans le monde moderne.
Quatri√®mement, des termes techniques : algorithme, machine learning, GPU RTX 3090, faster-whisper, quantification INT8, latence de transcription.
Cinqui√®mement, des nombres et dates : vingt-trois, quarante-sept, mille neuf cent quatre-vingt-quinze, le quinze janvier deux mille vingt-quatre.
Sixi√®mement, les mots difficiles : chrysanth√®me, anticonstitutionnellement, prestidigitateur, kak√©mono, yaourt.
Septi√®mement, une phrase longue et complexe : L'optimisation des performances de transcription vocale n√©cessite une approche m√©thodique combinant la s√©lection appropri√©e des mod√®les, l'ajustement des param√®tres de traitement et l'impl√©mentation d'algorithmes de post-traitement pour am√©liorer la qualit√© du r√©sultat final.
Fin du test de validation."""

async def main():
    """Test principal microphone live"""
    print("üé§ TEST MICROPHONE LIVE - SOLUTION STT OPTIMIS√âE")
    print("üö® GPU RTX 3090 OBLIGATOIRE")
    print("üéØ ATTENTION: Test en CONDITIONS R√âELLES - Vraies performances")
    print("=" * 80)
    
    try:
        # 1. Validation GPU
        validate_rtx3090_configuration()
        
        # 2. Instructions
        display_test_instructions()
        
        # 3. Texte de r√©f√©rence
        reference_text = get_test_text()
        print("üìù TEXTE √Ä LIRE:")
        print("-" * 40)
        print(reference_text)
        print("-" * 40)
        print()
        
        # 4. S√©lection microphone
        device_id, device_name = select_microphone()
        
        # 5. Pr√©paration enregistreur
        recorder = MicrophoneRecorder(device_id=device_id)
        
        # 6. Enregistrement
        input("üé§ Appuyez sur ENTER pour d√©marrer l'enregistrement...")
        recorder.start_recording()
        
        input("üî¥ ENREGISTREMENT EN COURS... Lisez le texte puis appuyez sur ENTER pour arr√™ter...")
        audio_data = recorder.stop_recording()
        
        if len(audio_data) == 0:
            print("‚ùå Aucune donn√©e audio enregistr√©e")
            return False
        
        duration = len(audio_data) / 16000
        print(f"‚úÖ Audio enregistr√©: {duration:.2f}s")
        
        # 7. Sauvegarde enregistrement
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        audio_file = f"test_microphone_live_{timestamp}.wav"
        recorder.save_recording(audio_data, audio_file)
        
        # 8. Test backend optimis√©
        backend_result = await test_backend_avec_microphone(audio_data, duration)
        
        if not backend_result:
            print("‚ùå Test backend √©chou√©")
            return False
        
        # 9. Test post-processeur
        post_processed, post_metrics = await test_post_processor_microphone(backend_result['text'])
        
        # 10. Calcul WER
        wer, errors = calculate_wer(reference_text, backend_result['text'])
        
        # 11. R√©sum√© global
        print("\n" + "="*80)
        print("üìä R√âSUM√â TEST MICROPHONE LIVE - CONDITIONS R√âELLES")
        print("="*80)
        
        print(f"üé§ Microphone: {device_name}")
        print(f"‚è±Ô∏è Dur√©e: {duration:.2f}s")
        print(f"‚úÖ Backend optimis√©: Transcription r√©ussie")
        print(f"‚úÖ Post-processeur: {post_metrics.get('corrections_applied', 0)} corrections")
        
        # M√©triques cl√©s
        print(f"\nüìà M√âTRIQUES CL√âS - CONDITIONS R√âELLES:")
        print(f"   RTF: {backend_result['rtf']:.3f}")
        print(f"   Confiance: {backend_result['confidence']:.3f}")
        print(f"   Temps traitement: {backend_result['processing_time']:.2f}s")
        print(f"   Mots transcrits: {len(backend_result['text'].split())}")
        print(f"   Corrections post-proc: {post_metrics.get('corrections_applied', 0)}")
        
        # WER Analysis
        print(f"\nüéØ ANALYSE PR√âCISION (WER):")
        print(f"   WER: {wer:.1f}%")
        print(f"   Erreurs: {errors}/{len(reference_text.split())} mots")
        print(f"   Mots r√©f√©rence: {len(reference_text.split())}")
        print(f"   Mots transcrits: {len(backend_result['text'].split())}")
        
        # √âvaluation performance
        if wer < 15:
            print(f"   üéâ EXCELLENT: WER < 15%")
        elif wer < 25:
            print(f"   ‚úÖ BON: WER < 25%")
        elif wer < 40:
            print(f"   ‚ö†Ô∏è MOYEN: WER < 40%")
        else:
            print(f"   ‚ùå INSUFFISANT: WER > 40%")
        
        # 12. G√©n√©ration rapport
        report_file = generate_microphone_report(
            device_name, duration, backend_result, 
            post_processed, post_metrics, reference_text
        )
        
        # 13. Comparaison avec fichier pr√©-enregistr√©
        print(f"\nüîç COMPARAISON FICHIER vs MICROPHONE:")
        print("   üìÅ Fichier pr√©-enregistr√©: RTF 0.115, Confiance 92.5%")
        print(f"   üé§ Microphone live: RTF {backend_result['rtf']:.3f}, Confiance {backend_result['confidence']*100:.1f}%")
        
        rtf_diff = ((backend_result['rtf'] - 0.115) / 0.115) * 100
        conf_diff = ((backend_result['confidence'] - 0.925) / 0.925) * 100
        
        print(f"   üìä Diff√©rence RTF: {rtf_diff:+.1f}%")
        print(f"   üìä Diff√©rence Confiance: {conf_diff:+.1f}%")
        
        print(f"\nüéØ CONCLUSION TEST MICROPHONE LIVE:")
        print("   ‚Üí Test en CONDITIONS R√âELLES termin√©")
        print("   ‚Üí Performances mesur√©es avec microphone live")
        print("   ‚Üí WER calcul√© avec texte de r√©f√©rence")
        print("   ‚Üí Comparaison fichier vs microphone disponible")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Erreur test microphone: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    # V√©rification d√©pendances
    try:
        import sounddevice as sd
    except ImportError:
        print("‚ùå Module sounddevice requis: pip install sounddevice")
        sys.exit(1)
    
    # Ex√©cution test
    success = asyncio.run(main())
    
    if success:
        print(f"\n‚úÖ Test microphone live termin√© avec succ√®s")
        print("üéØ Performances R√âELLES mesur√©es en conditions microphone")
    else:
        print(f"\n‚ùå Test microphone live √©chou√©") 