"""
Handler TTS MVP P0 utilisant Microsoft Hortense (voix fran√ßaise Windows native)
"""

import os
import time
import tempfile
import wave
import numpy as np
import sounddevice as sd
import win32com.client

class TTSHandlerMVP:
    """Handler TTS MVP utilisant voix fran√ßaise Windows native"""
    
    def __init__(self, config):
        self.config = config
        self.sample_rate = config.get('sample_rate', 22050)
        self.use_gpu = config.get('use_gpu', False)  # N/A pour SAPI
        
        # Initialiser SAPI Windows
        self._init_sapi()
        
    def _init_sapi(self):
        """Initialiser SAPI avec voix fran√ßaise"""
        print("üîÑ Initialisation TTS MVP (voix fran√ßaise Windows)...")
        
        try:
            self.sapi = win32com.client.Dispatch("SAPI.SpVoice")
            voices = self.sapi.GetVoices()
            
            # Chercher voix fran√ßaise
            french_voice = None
            print(f"üîç Recherche voix fran√ßaise parmi {voices.Count} voix...")
            
            for i in range(voices.Count):
                voice = voices.Item(i)
                name = voice.GetDescription()
                
                if any(keyword in name.lower() for keyword in ['french', 'fran√ßais', 'hortense']):
                    french_voice = voice
                    print(f"‚úÖ Voix fran√ßaise MVP trouv√©e: {name}")
                    break
            
            if french_voice:
                self.sapi.Voice = french_voice
                self.voice_name = french_voice.GetDescription()
            else:
                print("‚ö†Ô∏è Voix fran√ßaise non trouv√©e, utilisation voix par d√©faut")
                self.voice_name = "Voix par d√©faut"
            
            # Configuration optimale pour LUXA
            self.sapi.Rate = 1    # Vitesse l√©g√®rement acc√©l√©r√©e
            self.sapi.Volume = 100  # Volume maximum
            
            print(f"‚úÖ TTS MVP initialis√© avec: {self.voice_name}")
            self.sapi_available = True
            
        except Exception as e:
            print(f"‚ùå Erreur initialisation SAPI: {e}")
            self.sapi_available = False
            
    def synthesize_to_file(self, text, output_path):
        """Synth√®se vers fichier WAV"""
        if not self.sapi_available:
            return False
            
        try:
            # Utiliser win32com pour synth√®se fichier
            file_stream = win32com.client.Dispatch("SAPI.SpFileStream")
            file_stream.Open(output_path, 3)  # SSFMCreateForWrite
            
            # Rediriger sortie vers fichier
            original_output = self.sapi.AudioOutputStream
            self.sapi.AudioOutputStream = file_stream
            
            # Synth√®se
            self.sapi.Speak(text)
            
            # Restaurer sortie
            file_stream.Close()
            self.sapi.AudioOutputStream = original_output
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur synth√®se fichier MVP: {e}")
            return False
            
    def load_wav_file(self, file_path):
        """Charger fichier WAV et convertir en numpy array"""
        try:
            with wave.open(file_path, 'rb') as wav_file:
                frames = wav_file.readframes(-1)
                sample_rate = wav_file.getframerate()
                channels = wav_file.getnchannels()
                sample_width = wav_file.getsampwidth()
                
                # Convertir en numpy array
                if sample_width == 2:
                    audio_data = np.frombuffer(frames, dtype=np.int16)
                    audio_data = audio_data.astype(np.float32) / 32767.0
                else:
                    # Autres formats
                    audio_data = np.frombuffer(frames, dtype=np.int16)
                    audio_data = audio_data.astype(np.float32) / 32767.0
                
                # G√©rer st√©r√©o ‚Üí mono
                if channels == 2:
                    audio_data = audio_data.reshape(-1, 2).mean(axis=1)
                
                return audio_data, sample_rate
                
        except Exception as e:
            print(f"‚ùå Erreur lecture WAV MVP: {e}")
            return None, None
            
    def synthesize(self, text):
        """Synth√®se vocale MVP fran√ßaise"""
        print(f"üá´üá∑ Synth√®se TTS MVP (Microsoft Hortense)")
        print(f"   Texte: '{text}'")
        
        if not self.sapi_available:
            print("‚ùå SAPI MVP non disponible")
            return np.array([], dtype=np.int16)
        
        try:
            start_time = time.time()
            
            # Cr√©er fichier temporaire
            with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as tmp_file:
                tmp_path = tmp_file.name
            
            # Synth√®se vers fichier
            success = self.synthesize_to_file(text, tmp_path)
            
            if success and os.path.exists(tmp_path):
                # Charger audio
                audio_data, wav_sample_rate = self.load_wav_file(tmp_path)
                
                if audio_data is not None:
                    synth_time = time.time() - start_time
                    chars_per_sec = len(text) / synth_time if synth_time > 0 else 0
                    
                    print(f"   üéµ Audio MVP g√©n√©r√©: {len(audio_data)} √©chantillons")
                    print(f"   üìä Sample rate: {wav_sample_rate}Hz")
                    print(f"   ‚ö° Performance MVP: {chars_per_sec:.0f} car/s")
                    print(f"   üîç Range audio: [{audio_data.min():.3f}, {audio_data.max():.3f}]")
                    
                    # V√©rifier qualit√©
                    amplitude = max(abs(audio_data.min()), abs(audio_data.max()))
                    if amplitude > 0.01:
                        print(f"   ‚úÖ Audio MVP fran√ßais valide (amplitude: {amplitude:.3f})")
                    else:
                        print(f"   ‚ö†Ô∏è Audio MVP fran√ßais faible (amplitude: {amplitude:.3f})")
                    
                    # Conversion pour lecture
                    audio_int16 = (audio_data * 32767).clip(-32767, 32767).astype(np.int16)
                    
                    # Nettoyage
                    try:
                        os.unlink(tmp_path)
                    except:
                        pass
                    
                    return audio_int16
                    
            # Nettoyage en cas d'erreur
            try:
                os.unlink(tmp_path)
            except:
                pass
                
            return np.array([], dtype=np.int16)
            
        except Exception as e:
            print(f"‚ùå Erreur synth√®se MVP: {e}")
            import traceback
            traceback.print_exc()
            return np.array([], dtype=np.int16)
    
    def speak(self, text):
        """Synth√®se et lecture audio MVP fran√ßais"""
        audio_data = self.synthesize(text)
        
        if len(audio_data) > 0:
            print(f"   üîä Lecture audio MVP fran√ßais...")
            sd.play(audio_data, samplerate=self.sample_rate)
            sd.wait()
            print(f"   ‚úÖ Lecture MVP fran√ßaise termin√©e")
        else:
            print(f"   ‚ùå Pas d'audio MVP fran√ßais √† lire")
            
        return audio_data
        
    def get_info(self):
        """Informations sur le handler MVP"""
        return {
            'name': 'TTS MVP Fran√ßais',
            'engine': 'Microsoft SAPI',
            'voice': getattr(self, 'voice_name', 'Non configur√©e'),
            'language': 'Fran√ßais',
            'quality': 'Production ready',
            'performance': 'Rapide',
            'gpu_support': False
        } 