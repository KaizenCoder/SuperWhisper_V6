#!/usr/bin/env python3
"""
Script d'installation automatique TimeManager MCP v2.0
Compatible avec les derni√®res sp√©cifications Cursor AI MCP
"""

import os
import sys
import json
import shutil
import subprocess
from pathlib import Path
from typing import Dict, Any, Optional

class TimeManagerMCPInstaller:
    def __init__(self):
        self.project_root = Path(__file__).parent.absolute()
        self.home_dir = Path.home()
        self.cursor_dir = self.home_dir / ".cursor"
        self.cursor_mcp_file = self.cursor_dir / "mcp.json"
        
        # Configuration par d√©faut
        self.default_config = {
            "mcpServers": {
                "timemanager": {
                    "command": "python",
                    "args": [str(self.project_root / "mcp_timemanager_server.py")],
                    "env": {
                        "PYTHONPATH": str(self.project_root),
                        "TZ": "Europe/Paris"
                    }
                }
            }
        }
    
    def print_header(self):
        """Affiche l'en-t√™te d'installation"""
        print("=" * 60)
        print("üïê TimeManager MCP - Installation Automatique v2.0")
        print("=" * 60)
        print("üìã Fonctionnalit√©s :")
        print("  ‚úÖ Gestion du temps centralis√©e")
        print("  ‚úÖ M√©moire persistante")
        print("  ‚úÖ Formats multiples (ISO, journal, etc.)")
        print("  ‚úÖ Compatible Cursor AI derni√®re version")
        print()
    
    def check_prerequisites(self) -> bool:
        """V√©rifie les pr√©requis"""
        print("üîç V√©rification des pr√©requis...")
        
        # Python version
        python_version = sys.version_info
        if python_version < (3, 8):
            print(f"‚ùå Python 3.8+ requis (version actuelle: {python_version.major}.{python_version.minor})")
            return False
        print(f"‚úÖ Python {python_version.major}.{python_version.minor}.{python_version.micro}")
        
        # Package MCP
        try:
            import mcp
            print(f"‚úÖ Package MCP install√© (version: {mcp.__version__ if hasattr(mcp, '__version__') else 'inconnue'})")
        except ImportError:
            print("‚ö†Ô∏è  Package MCP non trouv√©. Installation en cours...")
            if not self.install_mcp():
                return False
        
        # TimeManager local
        if not (self.project_root / "utils" / "time_manager.py").exists():
            print("‚ùå TimeManager local non trouv√© dans utils/time_manager.py")
            return False
        print("‚úÖ TimeManager local trouv√©")
        
        return True
    
    def install_mcp(self) -> bool:
        """Installe le package MCP"""
        try:
            subprocess.run([sys.executable, "-m", "pip", "install", "mcp"], 
                         check=True, capture_output=True)
            print("‚úÖ Package MCP install√© avec succ√®s")
            return True
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Erreur installation MCP: {e}")
            return False
    
    def create_cursor_directory(self):
        """Cr√©e le r√©pertoire .cursor si n√©cessaire"""
        if not self.cursor_dir.exists():
            print(f"üìÅ Cr√©ation du r√©pertoire {self.cursor_dir}")
            self.cursor_dir.mkdir(parents=True, exist_ok=True)
        else:
            print(f"‚úÖ R√©pertoire {self.cursor_dir} existe")
    
    def backup_existing_config(self) -> Optional[Path]:
        """Sauvegarde la configuration existante"""
        if self.cursor_mcp_file.exists():
            backup_file = self.cursor_mcp_file.with_suffix('.json.backup')
            shutil.copy2(self.cursor_mcp_file, backup_file)
            print(f"üíæ Configuration existante sauvegard√©e: {backup_file}")
            return backup_file
        return None
    
    def load_existing_config(self) -> Dict[str, Any]:
        """Charge la configuration existante"""
        if self.cursor_mcp_file.exists():
            try:
                with open(self.cursor_mcp_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except (json.JSONDecodeError, Exception) as e:
                print(f"‚ö†Ô∏è  Erreur lecture config existante: {e}")
        return {"mcpServers": {}}
    
    def merge_configurations(self, existing_config: Dict[str, Any]) -> Dict[str, Any]:
        """Fusionne les configurations"""
        if "mcpServers" not in existing_config:
            existing_config["mcpServers"] = {}
        
        # Ajouter ou mettre √† jour TimeManager
        existing_config["mcpServers"]["timemanager"] = self.default_config["mcpServers"]["timemanager"]
        
        return existing_config
    
    def save_configuration(self, config: Dict[str, Any]):
        """Sauvegarde la configuration"""
        try:
            with open(self.cursor_mcp_file, 'w', encoding='utf-8') as f:
                json.dump(config, f, indent=2, ensure_ascii=False)
            print(f"‚úÖ Configuration sauvegard√©e: {self.cursor_mcp_file}")
        except Exception as e:
            print(f"‚ùå Erreur sauvegarde configuration: {e}")
            return False
        return True
    
    def test_server(self) -> bool:
        """Test le serveur MCP"""
        print("üß™ Test du serveur MCP...")
        try:
            # Test simple : import et instanciation
            result = subprocess.run([
                sys.executable, str(self.project_root / "mcp_timemanager_server.py")
            ], timeout=5, capture_output=True, text=True)
            
            # Le serveur devrait d√©marrer et attendre les entr√©es
            # Si pas d'erreur d'import, c'est bon
            if "Erreur:" not in result.stderr:
                print("‚úÖ Serveur MCP fonctionnel")
                return True
            else:
                print(f"‚ùå Erreur serveur: {result.stderr}")
                return False
                
        except subprocess.TimeoutExpired:
            # Timeout est normal (serveur en attente)
            print("‚úÖ Serveur MCP d√©marr√© correctement")
            return True
        except Exception as e:
            print(f"‚ùå Erreur test serveur: {e}")
            return False
    
    def create_project_config(self):
        """Cr√©e une configuration de projet optionnelle"""
        project_cursor_dir = self.project_root / ".cursor"
        project_mcp_file = project_cursor_dir / "mcp.json"
        
        if not project_cursor_dir.exists():
            project_cursor_dir.mkdir(exist_ok=True)
        
        project_config = {
            "mcpServers": {
                "timemanager": {
                    "command": "python",
                    "args": ["./mcp_timemanager_server.py"],
                    "env": {
                        "PYTHONPATH": ".",
                        "TZ": "Europe/Paris"
                    }
                }
            }
        }
        
        with open(project_mcp_file, 'w', encoding='utf-8') as f:
            json.dump(project_config, f, indent=2, ensure_ascii=False)
        
        print(f"‚úÖ Configuration projet cr√©√©e: {project_mcp_file}")
    
    def display_next_steps(self):
        """Affiche les √©tapes suivantes"""
        print("\n" + "=" * 60)
        print("üéâ Installation termin√©e avec succ√®s !")
        print("=" * 60)
        print("\nüìã √âtapes suivantes :")
        print("1. üîÑ Red√©marrer Cursor AI")
        print("2. ‚öôÔ∏è  Aller dans Cursor > Settings > MCP")
        print("3. ‚úÖ V√©rifier que 'timemanager' appara√Æt dans 'Available Tools'")
        print("4. üöÄ Tester avec une commande comme 'Cr√©er un fichier avec la date actuelle'")
        print("\nüéÆ Mode YOLO (optionnel) :")
        print("   - Dans Settings > MCP, activer 'Auto-run MCP tools'")
        print("   - L'IA utilisera TimeManager automatiquement")
        print("\nüîß D√©pannage :")
        print(f"   - Logs: Cursor > Help > Show Logs")
        print(f"   - Config: {self.cursor_mcp_file}")
        print(f"   - Test: python {self.project_root / 'mcp_timemanager_server.py'}")
        print("\nüìñ Documentation compl√®te :")
        print(f"   - {self.project_root / 'TIMEMANAGER_MCP_GUIDE_COMPLET.md'}")
    
    def install(self):
        """Lance l'installation compl√®te"""
        self.print_header()
        
        # V√©rifications pr√©alables
        if not self.check_prerequisites():
            print("‚ùå Installation interrompue - pr√©requis non satisfaits")
            return False
        
        # Cr√©ation du r√©pertoire Cursor
        self.create_cursor_directory()
        
        # Sauvegarde et fusion des configurations
        backup_file = self.backup_existing_config()
        existing_config = self.load_existing_config()
        merged_config = self.merge_configurations(existing_config)
        
        # Sauvegarde de la nouvelle configuration
        if not self.save_configuration(merged_config):
            print("‚ùå Installation interrompue - erreur de configuration")
            return False
        
        # Test du serveur
        if not self.test_server():
            print("‚ö†Ô∏è  Serveur non test√© - v√©rifiez manuellement")
        
        # Configuration de projet
        self.create_project_config()
        
        # Instructions finales
        self.display_next_steps()
        
        return True

def main():
    """Point d'entr√©e principal"""
    installer = TimeManagerMCPInstaller()
    
    try:
        success = installer.install()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚ùå Installation interrompue par l'utilisateur")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erreur inattendue: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 