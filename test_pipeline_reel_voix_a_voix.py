#!/usr/bin/env python3
"""
Test Pipeline R√©el Voix-√†-Voix SuperWhisper V6
Microphone ‚Üí STT ‚Üí LLM ‚Üí TTS ‚Üí Audio en temps r√©el
üö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE
"""

import os
import sys
import time
import logging
import asyncio
import pathlib
import signal
from pathlib import Path

# =============================================================================
# üöÄ PORTABILIT√â AUTOMATIQUE - EX√âCUTABLE DEPUIS N'IMPORTE O√ô
# =============================================================================
def _setup_portable_environment():
    """Configure l'environnement pour ex√©cution portable"""
    current_file = pathlib.Path(__file__).resolve()
    
    # Chercher le r√©pertoire racine (contient .git ou marqueurs projet)
    project_root = current_file
    for parent in current_file.parents:
        if any((parent / marker).exists() for marker in ['.git', 'pyproject.toml', 'requirements.txt', '.taskmaster']):
            project_root = parent
            break
    
    # Ajouter le projet root au Python path
    if str(project_root) not in sys.path:
        sys.path.insert(0, str(project_root))
    
    # Changer le working directory vers project root
    os.chdir(project_root)
    
    # Configuration GPU RTX 3090 obligatoire
    os.environ['CUDA_VISIBLE_DEVICES'] = '1'        # RTX 3090 24GB EXCLUSIVEMENT
    os.environ['CUDA_DEVICE_ORDER'] = 'PCI_BUS_ID'  # Ordre stable des GPU
    
    print(f"üéÆ GPU Configuration: RTX 3090 (CUDA:1) forc√©e")
    print(f"üìÅ Project Root: {project_root}")
    print(f"üíª Working Directory: {os.getcwd()}")
    
    return project_root

# Initialiser l'environnement portable
_PROJECT_ROOT = _setup_portable_environment()

# Configuration des logs
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(name)s] %(levelname)s: %(message)s',
    datefmt='%H:%M:%S'
)
logger = logging.getLogger("VoixAVoix")

class PipelineVoixAVoix:
    """Pipeline voix-√†-voix temps r√©el avec microphone streaming"""
    
    def __init__(self):
        self.stt_manager = None
        self.llm_manager = None
        self.tts_manager = None
        self.running = False
        self.conversation_count = 0
        
    def initialize_components(self):
        """Initialise tous les composants du pipeline"""
        logger.info("üîß Initialisation des composants pipeline...")
        
        try:
            # 1. STT Manager (valid√©)
            from STT.unified_stt_manager import UnifiedSTTManager
            stt_config = {
                'timeout_per_minute': 10.0,
                'cache_size_mb': 200,
                'fallback_chain': ['prism_primary']
            }
            self.stt_manager = UnifiedSTTManager(stt_config)
            logger.info("‚úÖ STT Manager initialis√©")
            
            # 2. LLM Manager 
            from LLM.llm_manager_enhanced import EnhancedLLMManager
            llm_config = {
                'model': 'nous-hermes',
                'base_url': 'http://127.0.0.1:11434/v1',
                'timeout': 30.0
            }
            self.llm_manager = EnhancedLLMManager(llm_config)
            logger.info("‚úÖ LLM Manager initialis√©")
            
            # 3. TTS Manager (valid√©)
            from TTS.tts_manager import UnifiedTTSManager
            import yaml
            with open('config/tts.yaml', 'r') as f:
                tts_config = yaml.safe_load(f)
            self.tts_manager = UnifiedTTSManager(tts_config)
            logger.info("‚úÖ TTS Manager initialis√©")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur initialisation: {e}")
            return False
    
    def capture_audio_from_microphone(self, duration_seconds=5):
        """Capture audio depuis le microphone"""
        logger.info(f"üé§ Capture audio pendant {duration_seconds}s...")
        logger.info("üí¨ Parlez maintenant dans le microphone !")
        
        try:
            import sounddevice as sd
            import numpy as np
            
            # Configuration audio
            sample_rate = 16000
            channels = 1
            
            # Capture audio
            logger.info("üî¥ Enregistrement en cours...")
            audio_data = sd.rec(
                int(duration_seconds * sample_rate), 
                samplerate=sample_rate, 
                channels=channels,
                dtype=np.float32
            )
            sd.wait()  # Attendre la fin de l'enregistrement
            
            logger.info("‚úÖ Enregistrement termin√©")
            
            # Convertir en bytes pour STT
            audio_bytes = (audio_data * 32767).astype(np.int16).tobytes()
            
            return audio_bytes
            
        except Exception as e:
            logger.error(f"‚ùå Erreur capture audio: {e}")
            return None
    
    async def process_stt(self, audio_bytes):
        """Traite l'audio avec STT"""
        logger.info("üé§ Traitement STT...")
        start_time = time.perf_counter()
        
        try:
            # Transcription audio avec la m√©thode correcte
            result = await self.stt_manager.transcribe_pcm(audio_bytes, 16000)
            
            stt_time = (time.perf_counter() - start_time) * 1000
            
            if result and result.strip():
                logger.info(f"‚úÖ STT r√©ussi ({stt_time:.1f}ms): '{result}'")
                return result, stt_time
            else:
                logger.warning("‚ö†Ô∏è STT vide - aucun texte d√©tect√©")
                return None, stt_time
                
        except Exception as e:
            logger.error(f"‚ùå Erreur STT: {e}")
            return None, 0
    
    async def process_llm(self, user_text):
        """Traite le texte avec LLM"""
        logger.info("üß† Traitement LLM...")
        start_time = time.perf_counter()
        
        try:
            # G√©n√©ration r√©ponse LLM
            response = await self.llm_manager.generate_response(
                user_input=user_text,
                max_tokens=100
            )
            
            llm_time = (time.perf_counter() - start_time) * 1000
            
            logger.info(f"‚úÖ LLM r√©ussi ({llm_time:.1f}ms): '{response}'")
            return response, llm_time
            
        except Exception as e:
            logger.error(f"‚ùå Erreur LLM: {e}")
            fallback_response = "Je suis d√©sol√©, je n'ai pas pu traiter votre demande."
            return fallback_response, 0
    
    async def process_tts(self, response_text):
        """Traite le texte avec TTS"""
        logger.info("üîä Synth√®se TTS...")
        start_time = time.perf_counter()
        
        try:
            # Synth√®se vocale
            tts_result = await self.tts_manager.synthesize(text=response_text)
            
            tts_time = (time.perf_counter() - start_time) * 1000
            
            if tts_result.success and tts_result.audio_data:
                # Sauvegarder et jouer l'audio
                conversation_file = f"conversation_{self.conversation_count}.wav"
                with open(conversation_file, 'wb') as f:
                    f.write(tts_result.audio_data)
                
                logger.info(f"‚úÖ TTS r√©ussi ({tts_time:.1f}ms)")
                logger.info(f"üìÅ Audio sauvegard√©: {conversation_file}")
                logger.info(f"üéõÔ∏è Backend: {tts_result.backend_used}")
                
                # Tentative de lecture automatique
                try:
                    import subprocess
                    logger.info("üîä Lecture audio...")
                    # Pour Windows WSL, essayer avec explorer.exe
                    subprocess.Popen([
                        "cmd.exe", "/c", "start", "", 
                        os.path.abspath(conversation_file).replace('/mnt/c', 'C:')
                    ], shell=False, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                except:
                    logger.info(f"üéß Lisez manuellement: {conversation_file}")
                
                return True, tts_time, conversation_file
            else:
                logger.error(f"‚ùå TTS √©chou√©: {tts_result.error}")
                return False, tts_time, None
                
        except Exception as e:
            logger.error(f"‚ùå Erreur TTS: {e}")
            return False, 0, None
    
    async def run_conversation_cycle(self):
        """Ex√©cute un cycle complet de conversation voix-√†-voix"""
        self.conversation_count += 1
        
        logger.info("\n" + "="*60)
        logger.info(f"üéØ CONVERSATION #{self.conversation_count}")
        logger.info("="*60)
        
        total_start = time.perf_counter()
        
        # 1. Capture microphone
        audio_bytes = self.capture_audio_from_microphone(duration_seconds=5)
        if not audio_bytes:
            logger.error("‚ùå √âchec capture audio")
            return False
        
        # 2. STT
        user_text, stt_time = await self.process_stt(audio_bytes)
        if not user_text:
            logger.warning("‚ö†Ô∏è Aucun texte d√©tect√© - cycle abandonn√©")
            return False
        
        # 3. LLM
        llm_response, llm_time = await self.process_llm(user_text)
        
        # 4. TTS
        tts_success, tts_time, audio_file = await self.process_tts(llm_response)
        
        # 5. R√©sultats
        total_time = (time.perf_counter() - total_start) * 1000
        
        logger.info("\nüìä R√âSULTATS CONVERSATION")
        logger.info("-" * 40)
        logger.info(f"üë§ Utilisateur: '{user_text}'")
        logger.info(f"ü§ñ Assistant: '{llm_response}'")
        logger.info(f"‚è±Ô∏è STT: {stt_time:.1f}ms")
        logger.info(f"‚è±Ô∏è LLM: {llm_time:.1f}ms") 
        logger.info(f"‚è±Ô∏è TTS: {tts_time:.1f}ms")
        logger.info(f"‚è±Ô∏è TOTAL: {total_time:.1f}ms")
        
        if audio_file:
            logger.info(f"üéß Audio: {audio_file}")
        
        return tts_success
    
    async def run_interactive_session(self):
        """Session interactive continue"""
        logger.info("\nüöÄ SESSION VOIX-√Ä-VOIX INTERACTIVE")
        logger.info("="*60)
        logger.info("üí¨ Parlez dans le microphone pour commencer")
        logger.info("üõë Ctrl+C pour arr√™ter")
        logger.info("="*60)
        
        self.running = True
        
        try:
            while self.running:
                success = await self.run_conversation_cycle()
                
                if success:
                    logger.info("\n‚úÖ Conversation r√©ussie !")
                else:
                    logger.warning("\n‚ö†Ô∏è Conversation partiellement r√©ussie")
                
                # Pause avant la prochaine conversation
                logger.info("\n‚è≥ Pause 3s avant la prochaine conversation...")
                await asyncio.sleep(3)
                
        except KeyboardInterrupt:
            logger.info("\nüõë Session arr√™t√©e par l'utilisateur")
        except Exception as e:
            logger.error(f"\n‚ùå Erreur session: {e}")
        finally:
            self.running = False

def main():
    """Point d'entr√©e principal"""
    logger.info("üöÄ SuperWhisper V6 - Test Pipeline R√©el Voix-√†-Voix")
    
    # Gestionnaire de signal pour arr√™t propre
    def signal_handler(signum, frame):
        logger.info("\nüõë Arr√™t demand√©...")
        sys.exit(0)
    
    signal.signal(signal.SIGINT, signal_handler)
    
    try:
        # Initialiser le pipeline
        pipeline = PipelineVoixAVoix()
        
        if not pipeline.initialize_components():
            logger.error("‚ùå √âchec initialisation - arr√™t")
            return
        
        # Lancer la session interactive
        asyncio.run(pipeline.run_interactive_session())
        
    except Exception as e:
        logger.error(f"‚ùå Erreur fatale: {e}")

if __name__ == "__main__":
    main()