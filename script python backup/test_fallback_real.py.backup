#!/usr/bin/env python3
"""
Test pratique du syst√®me de fallback avec simulation de pannes.
"""

import asyncio
import yaml
import os
import sys

# Configuration GPU RTX 3090 obligatoire
os.environ['CUDA_VISIBLE_DEVICES'] = '1'
os.environ['CUDA_DEVICE_ORDER'] = 'PCI_BUS_ID'

# Import du manager unifi√©
sys.path.append('.')
from TTS.tts_manager import UnifiedTTSManager

async def test_fallback_simulation():
    print("üîß TEST FALLBACK R√âEL - Simulation pannes")
    
    with open('config/tts.yaml', 'r') as f:
        config = yaml.safe_load(f)
    
    # Test 1: Tous handlers actifs
    print("\n1Ô∏è‚É£ Test normal (tous handlers actifs)")
    manager = UnifiedTTSManager(config)
    result = await manager.synthesize("Test normal avec tous les backends.")
    print(f"‚úÖ Backend utilis√©: {result.backend_used} ({result.latency_ms:.0f}ms)")
    
    # Test 2: D√©sactiver piper_native (forcer fallback)
    print("\n2Ô∏è‚É£ Test fallback (piper_native d√©sactiv√©)")
    config['backends']['piper_native']['enabled'] = False
    manager = UnifiedTTSManager(config)
    result = await manager.synthesize("Test fallback vers piper CLI.")
    print(f"‚úÖ Backend utilis√©: {result.backend_used} ({result.latency_ms:.0f}ms)")
    
    # Test 3: D√©sactiver piper_native + piper_cli (forcer SAPI)
    print("\n3Ô∏è‚É£ Test fallback SAPI (piper d√©sactiv√©s)")
    config['backends']['piper_cli']['enabled'] = False
    manager = UnifiedTTSManager(config)
    result = await manager.synthesize("Test fallback vers SAPI fran√ßais.")
    print(f"‚úÖ Backend utilis√©: {result.backend_used} ({result.latency_ms:.0f}ms)")
    
    # Test 4: Tous d√©sactiv√©s sauf emergency
    print("\n4Ô∏è‚É£ Test emergency (tous backends d√©sactiv√©s)")
    config['backends']['sapi_french']['enabled'] = False
    manager = UnifiedTTSManager(config)
    result = await manager.synthesize("Test handler d'urgence silencieux.")
    print(f"‚úÖ Backend utilis√©: {result.backend_used} ({result.latency_ms:.0f}ms)")
    
    print(f"\nüéØ VALIDATION: Cha√Æne de fallback compl√®te test√©e!")

if __name__ == "__main__":
    asyncio.run(test_fallback_simulation()) 