#!/usr/bin/env python3
"""
üöÄ Script de Promotion de Tests - SuperWhisper V6

Utilitaire pour promouvoir des tests depuis r√©pertoires temporaires
vers r√©pertoires stables (unit/ ou integration/).

Usage:
    python tools/promote_test.py .cursor-tmp/scratch_test.py tests/unit/
    python tools/promote_test.py tests/sandbox/experiment.py tests/integration/
    python tools/promote_test.py .cursor-tmp/temp_stt.py tests/unit/ --rename=test_stt_optimized.py

üö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE
"""

import os
import sys
import shutil
import pathlib
import argparse
from datetime import datetime

# =============================================================================
# üö® CONFIGURATION CRITIQUE GPU - RTX 3090 UNIQUEMENT 
# =============================================================================
os.environ['CUDA_VISIBLE_DEVICES'] = '1'        # RTX 3090 24GB EXCLUSIVEMENT
os.environ['CUDA_DEVICE_ORDER'] = 'PCI_BUS_ID'  # Ordre stable des GPU

print("üéÆ GPU Configuration: RTX 3090 (CUDA:1) forc√©e pour promote_test.py")

# R√©pertoires valides pour promotion
VALID_TARGET_DIRS = [
    "tests/unit",
    "tests/integration", 
    "PIPELINE/tests/unit",
    "PIPELINE/tests/integration"
]

def validate_source_file(source_path):
    """Valide que le fichier source existe et est un test Python"""
    source = pathlib.Path(source_path)
    
    if not source.exists():
        raise FileNotFoundError(f"‚ùå Fichier source non trouv√©: {source}")
    
    if not source.suffix == '.py':
        raise ValueError(f"‚ùå Le fichier doit √™tre un script Python (.py): {source}")
    
    if not source.is_file():
        raise ValueError(f"‚ùå Le chemin doit pointer vers un fichier: {source}")
    
    return source

def validate_target_dir(target_dir):
    """Valide que le r√©pertoire cible est autoris√©"""
    target = pathlib.Path(target_dir)
    
    # Normaliser le chemin pour comparaison
    target_str = str(target).replace('\\', '/')
    
    if target_str not in VALID_TARGET_DIRS:
        print(f"‚ö†Ô∏è  R√©pertoire cible non standard: {target_str}")
        print(f"üìã R√©pertoires recommand√©s: {', '.join(VALID_TARGET_DIRS)}")
        
        response = input("ü§î Continuer quand m√™me? [y/N]: ").lower()
        if response not in ['y', 'yes']:
            raise ValueError(f"‚ùå Promotion annul√©e par l'utilisateur")
    
    # Cr√©er le r√©pertoire cible s'il n'existe pas
    target.mkdir(parents=True, exist_ok=True)
    
    return target

def generate_target_filename(source_path, target_dir, custom_name=None):
    """G√©n√®re le nom de fichier cible avec conventions"""
    source = pathlib.Path(source_path)
    target_dir = pathlib.Path(target_dir)
    
    if custom_name:
        target_filename = custom_name
        if not target_filename.endswith('.py'):
            target_filename += '.py'
    else:
        # Nettoyer le nom: enlever pr√©fixes temporaires
        filename = source.name
        
        # Enlever pr√©fixes temporaires courants
        temp_prefixes = ['scratch_', 'tmp_', 'temp_', 'debug_']
        for prefix in temp_prefixes:
            if filename.startswith(prefix):
                filename = filename[len(prefix):]
                break
        
        # Assurer pr√©fixe test_
        if not filename.startswith('test_'):
            filename = f"test_{filename}"
        
        target_filename = filename
    
    target_path = target_dir / target_filename
    
    # √âviter √©crasement de fichiers existants
    counter = 1
    original_target = target_path
    while target_path.exists():
        stem = original_target.stem
        suffix = original_target.suffix
        target_path = original_target.parent / f"{stem}_{counter:02d}{suffix}"
        counter += 1
    
    return target_path

def update_test_header(source_path, target_path):
    """Met √† jour l'en-t√™te du test pour refl√©ter sa promotion"""
    try:
        # Lire le contenu original
        with open(source_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Pr√©parer nouveau header
        timestamp = datetime.now().strftime("%d/%m/%Y %H:%M")
        promotion_header = f'''#!/usr/bin/env python3
"""
‚úÖ Test Promu - SuperWhisper V6

Promu depuis: {source_path}
Vers: {target_path}
Date promotion: {timestamp}
Statut: Test valid√© et permanent

üö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE
"""

import os
import sys

# =============================================================================
# üö® CONFIGURATION CRITIQUE GPU - RTX 3090 UNIQUEMENT 
# =============================================================================
os.environ['CUDA_VISIBLE_DEVICES'] = '1'        # RTX 3090 24GB EXCLUSIVEMENT
os.environ['CUDA_DEVICE_ORDER'] = 'PCI_BUS_ID'  # Ordre stable des GPU

print("üéÆ GPU Configuration: RTX 3090 (CUDA:1) forc√©e")

'''
        
        # Extraire le contenu apr√®s les imports de base
        lines = content.split('\n')
        content_start = 0
        
        # Trouver o√π commence le vrai contenu (apr√®s imports syst√®me)
        for i, line in enumerate(lines):
            if line.strip().startswith('def ') or line.strip().startswith('class ') or \
               (line.strip() and not line.strip().startswith('#') and 
                not line.strip().startswith('import') and 
                not line.strip().startswith('from') and 
                not line.strip().startswith('os.environ') and
                not line.strip().startswith('print(')):
                content_start = i
                break
        
        # Combiner nouveau header avec contenu existant
        promoted_content = promotion_header + '\n'.join(lines[content_start:])
        
        # √âcrire le fichier promu
        with open(target_path, 'w', encoding='utf-8') as f:
            f.write(promoted_content)
            
        return True
        
    except Exception as e:
        print(f"‚ö†Ô∏è  Erreur mise √† jour header: {e}")
        # Fallback: copie simple
        shutil.copy2(source_path, target_path)
        return False

def promote_test(source_path, target_dir, custom_name=None, copy_mode=False):
    """Promeut un test depuis r√©pertoire temporaire vers r√©pertoire stable"""
    
    print(f"üöÄ Promotion de test en cours...")
    print(f"üìÅ Source: {source_path}")
    print(f"üìÇ Cible: {target_dir}")
    
    # Validations
    source = validate_source_file(source_path)
    target_dir_path = validate_target_dir(target_dir)
    target_path = generate_target_filename(source_path, target_dir_path, custom_name)
    
    print(f"‚ú® Fichier cible: {target_path}")
    
    # Confirmation
    print(f"\nüìã R√âSUM√â PROMOTION:")
    print(f"   Source: {source}")
    print(f"   Cible: {target_path}")
    print(f"   Mode: {'Copie' if copy_mode else 'D√©placement'}")
    
    response = input(f"\nü§î Confirmer la promotion? [Y/n]: ").lower()
    if response in ['n', 'no']:
        print("‚ùå Promotion annul√©e")
        return False
    
    try:
        # Mise √† jour contenu avec header promotion
        header_updated = update_test_header(source, target_path)
        
        if header_updated:
            print(f"‚úÖ Header mis √† jour avec info promotion")
        else:
            print(f"‚ö†Ô∏è  Header standard appliqu√©")
        
        # Supprimer source si mode d√©placement
        if not copy_mode:
            source.unlink()
            print(f"üóëÔ∏è  Fichier source supprim√©: {source}")
        
        print(f"üéä PROMOTION R√âUSSIE!")
        print(f"‚úÖ Test disponible dans: {target_path}")
        
        # Sugg√©rer prochaines √©tapes
        print(f"\nüí° PROCHAINES √âTAPES:")
        print(f"   1. V√©rifier le test promu: python {target_path}")
        print(f"   2. Commit Git: git add {target_path}")
        if not copy_mode:
            print(f"   3. Commit suppression: git rm {source}")
        print(f"   4. Tests CI/CD: pytest {target_path}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur promotion: {e}")
        return False

def main():
    """Fonction principale"""
    parser = argparse.ArgumentParser(
        description="üöÄ Promote test files from temporary to stable directories",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
    python tools/promote_test.py .cursor-tmp/scratch_stt.py tests/unit/
    python tools/promote_test.py tests/sandbox/experiment.py tests/integration/
    python tools/promote_test.py .cursor-tmp/temp_debug.py tests/unit/ --rename=test_gpu_validation.py
    python tools/promote_test.py tests/sandbox/quick_test.py PIPELINE/tests/unit/ --copy
        """
    )
    
    parser.add_argument('source', help='Source file path (e.g., .cursor-tmp/scratch_test.py)')
    parser.add_argument('target_dir', help='Target directory (e.g., tests/unit/)')
    parser.add_argument('--rename', help='Custom filename for promoted test')
    parser.add_argument('--copy', action='store_true', 
                       help='Copy instead of move (keep original file)')
    parser.add_argument('--force', action='store_true',
                       help='Skip confirmation prompts')
    
    args = parser.parse_args()
    
    print("üöÄ SuperWhisper V6 - Test Promotion Tool")
    print("=" * 50)
    
    # Override confirmation si mode force
    if args.force:
        global input
        input = lambda x: 'y'
    
    success = promote_test(
        args.source, 
        args.target_dir, 
        args.rename, 
        args.copy
    )
    
    return 0 if success else 1

if __name__ == "__main__":
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  Promotion interrompue par l'utilisateur")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erreur inattendue: {e}")
        sys.exit(1) 