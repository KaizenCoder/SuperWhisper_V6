#!/usr/bin/env python3
"""
Test d'√©coute TTS SuperWhisper V6
Synth√®se vocale fran√ßaise avec lecture audio
üö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE
"""

import os
import sys
import time
import logging
import asyncio
import pathlib
from pathlib import Path

# =============================================================================
# üöÄ PORTABILIT√â AUTOMATIQUE - EX√âCUTABLE DEPUIS N'IMPORTE O√ô
# =============================================================================
def _setup_portable_environment():
    """Configure l'environnement pour ex√©cution portable"""
    current_file = pathlib.Path(__file__).resolve()
    
    # Chercher le r√©pertoire racine (contient .git ou marqueurs projet)
    project_root = current_file
    for parent in current_file.parents:
        if any((parent / marker).exists() for marker in ['.git', 'pyproject.toml', 'requirements.txt', '.taskmaster']):
            project_root = parent
            break
    
    # Ajouter le projet root au Python path
    if str(project_root) not in sys.path:
        sys.path.insert(0, str(project_root))
    
    # Changer le working directory vers project root
    os.chdir(project_root)
    
    # Configuration GPU RTX 3090 obligatoire
    os.environ['CUDA_VISIBLE_DEVICES'] = '1'        # RTX 3090 24GB EXCLUSIVEMENT
    os.environ['CUDA_DEVICE_ORDER'] = 'PCI_BUS_ID'  # Ordre stable des GPU
    
    print(f"üéÆ GPU Configuration: RTX 3090 (CUDA:1) forc√©e")
    print(f"üìÅ Project Root: {project_root}")
    print(f"üíª Working Directory: {os.getcwd()}")
    
    return project_root

# Initialiser l'environnement portable
_PROJECT_ROOT = _setup_portable_environment()

# Configuration des logs
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(name)s] %(levelname)s: %(message)s',
    datefmt='%H:%M:%S'
)
logger = logging.getLogger("TTSTest")

async def test_tts_ecoute():
    """Test d'√©coute TTS avec audio en sortie"""
    logger.info("üîä Test TTS SuperWhisper V6 - √âcoute audio")
    logger.info("=" * 60)
    
    try:
        # Import des modules TTS
        from TTS.tts_manager import UnifiedTTSManager
        import yaml
        
        # Charger la configuration TTS valid√©e
        logger.info("üìã Chargement configuration TTS...")
        with open('config/tts.yaml', 'r') as f:
            tts_config = yaml.safe_load(f)
        
        # Initialiser le TTS Manager
        logger.info("üöÄ Initialisation UnifiedTTSManager...")
        tts = UnifiedTTSManager(tts_config)
        logger.info("‚úÖ TTS Manager initialis√© avec succ√®s")
        
        # Textes de test
        textes_test = [
            "Bonjour, je suis l'assistant vocal SuperWhisper version 6.",
            "Test de qualit√© audio avec voix fran√ßaise naturelle.",
            "Les performances sont optimis√©es pour RTX 3090.",
            "Merci de valider la qualit√© sonore de cette synth√®se vocale."
        ]
        
        logger.info("üé§ G√©n√©ration des √©chantillons audio...")
        
        for i, texte in enumerate(textes_test, 1):
            logger.info(f"\nüìù Test {i}/4: '{texte}'")
            
            # Mesure de performance
            start_time = time.perf_counter()
            
            # Synth√®se vocale
            result = await tts.synthesize(text=texte)
            
            end_time = time.perf_counter()
            latence_ms = (end_time - start_time) * 1000
            
            if result.success and result.audio_data:
                # Sauvegarder l'audio
                output_file = f"test_tts_output_{i}.wav"
                with open(output_file, 'wb') as f:
                    f.write(result.audio_data)
                
                logger.info(f"‚úÖ Synth√®se r√©ussie:")
                logger.info(f"   üìÅ Fichier: {output_file}")
                logger.info(f"   ‚è±Ô∏è  Latence: {latence_ms:.1f}ms")
                logger.info(f"   üéõÔ∏è  Backend: {result.backend_used}")
                logger.info(f"   üìä Taille: {len(result.audio_data)} bytes")
                
                # Lecture audio automatique (Windows)
                try:
                    import subprocess
                    logger.info(f"üîä Lecture audio automatique...")
                    # Utiliser le lecteur audio par d√©faut de Windows
                    subprocess.Popen([
                        "powershell", "-c", 
                        f"Add-Type -AssemblyName System.Speech; "
                        f"(New-Object System.Media.SoundPlayer('{os.path.abspath(output_file)}')).PlaySync()"
                    ], shell=True)
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Lecture auto impossible: {e}")
                    logger.info(f"üéß Lisez manuellement: {output_file}")
                
                # Pause entre les tests
                if i < len(textes_test):
                    logger.info("‚è≥ Pause 2s avant le prochain test...")
                    await asyncio.sleep(2)
                    
            else:
                logger.error(f"‚ùå √âchec synth√®se: {result.error}")
        
        logger.info("\n" + "=" * 60)
        logger.info("üéâ Test TTS termin√©!")
        logger.info("üéß V√©rifiez la qualit√© audio des fichiers g√©n√©r√©s")
        logger.info("üìÅ Fichiers: test_tts_output_1.wav √† test_tts_output_4.wav")
        
    except Exception as e:
        logger.error(f"‚ùå Erreur test TTS: {e}")
        import traceback
        traceback.print_exc()

def main():
    """Point d'entr√©e principal"""
    logger.info("üöÄ SuperWhisper V6 - Test √©coute TTS")
    
    try:
        # Lancer le test async
        asyncio.run(test_tts_ecoute())
        
    except KeyboardInterrupt:
        logger.info("üõë Test interrompu par l'utilisateur")
    except Exception as e:
        logger.error(f"‚ùå Erreur fatale: {e}")

if __name__ == "__main__":
    main()