#!/usr/bin/env python3
"""
Test fonctionnel du nouveau handler TTS Piper Direct

üö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE
"""

import os
import sys
import pathlib

# =============================================================================
# üöÄ PORTABILIT√â AUTOMATIQUE - EX√âCUTABLE DEPUIS N'IMPORTE O√ô
# =============================================================================
def _setup_portable_environment():
    """Configure l'environnement pour ex√©cution portable"""
    # D√©terminer le r√©pertoire racine du projet
    current_file = pathlib.Path(__file__).resolve()
    
    # Chercher le r√©pertoire racine (contient .git ou marqueurs projet)
    project_root = current_file
    for parent in current_file.parents:
        if any((parent / marker).exists() for marker in ['.git', 'pyproject.toml', 'requirements.txt', '.taskmaster']):
            project_root = parent
            break
    
    # Ajouter le projet root au Python path
    if str(project_root) not in sys.path:
        sys.path.insert(0, str(project_root))
    
    # Changer le working directory vers project root
    os.chdir(project_root)
    
    # Configuration GPU RTX 3090 obligatoire
    os.environ['CUDA_VISIBLE_DEVICES'] = '1'        # RTX 3090 24GB EXCLUSIVEMENT
    os.environ['CUDA_DEVICE_ORDER'] = 'PCI_BUS_ID'  # Ordre stable des GPU
    
    print(f"üéÆ GPU Configuration: RTX 3090 (CUDA:1) forc√©e")
    print(f"üìÅ Project Root: {project_root}")
    print(f"üíª Working Directory: {os.getcwd()}")
    
    return project_root

# Initialiser l'environnement portable
_PROJECT_ROOT = _setup_portable_environment()

# Maintenant imports normaux...

import time
import traceback

# Ajouter le r√©pertoire courant au path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_piper_direct():
    """Test complet du handler TTS Piper Direct"""
    
    print("üéØ TEST TTS PIPER DIRECT")
    print("=" * 50)
    
    # Configuration du test
    config = {
        'model_path': 'D:\\TTS_Voices\\piper\\fr_FR-siwis-medium.onnx',
        'use_gpu': True,
        'sample_rate': 22050,
        'noise_scale': 0.667,
        'noise_scale_w': 0.8,
        'length_scale': 1.0
    }
    
    try:
        # V√©rification du mod√®le
        print("\n1. üîç V√©rification du mod√®le...")
        if not os.path.exists(config['model_path']):
            print(f"‚ùå Mod√®le non trouv√©: {config['model_path']}")
            return False
        
        file_size = os.path.getsize(config['model_path']) / (1024*1024)  # MB
        print(f"‚úÖ Mod√®le trouv√©: {config['model_path']} ({file_size:.1f} MB)")
        
        # Importation du handler
        print("\n2. üì¶ Importation du handler...")
        from TTS.tts_handler_piper_direct import TTSHandlerPiperDirect
        print("‚úÖ Handler import√© avec succ√®s")
        
        # Initialisation
        print("\n3. üöÄ Initialisation...")
        start_time = time.time()
        
        tts_handler = TTSHandlerPiperDirect(config)
        
        init_time = time.time() - start_time
        print(f"‚úÖ Handler initialis√© en {init_time:.2f}s")
        
        # Test de synth√®se courte
        print("\n4. üîä Test synth√®se courte...")
        short_text = "Salut !"
        
        synthesis_start = time.time()
        tts_handler.speak(short_text)
        synthesis_time = time.time() - synthesis_start
        
        print(f"‚úÖ Synth√®se courte en {synthesis_time:.2f}s")
        
        # Test de synth√®se longue
        print("\n5. üîä Test synth√®se longue...")
        long_text = "Bonjour ! Je suis LUXA, votre assistant vocal intelligent. Ceci est un test complet de synth√®se vocale fran√ßaise avec Piper Direct."
        
        synthesis_start = time.time()
        tts_handler.speak(long_text)
        synthesis_time = time.time() - synthesis_start
        
        print(f"‚úÖ Synth√®se longue en {synthesis_time:.2f}s")
        
        # R√©sultats
        print("\n6. üìä R√©sultats:")
        print(f"   ‚Ä¢ Temps d'initialisation: {init_time:.2f}s")
        print(f"   ‚Ä¢ Synth√®se courte: {synthesis_time:.2f}s")
        print(f"   ‚Ä¢ Performance: {len(long_text)/synthesis_time:.1f} caract√®res/s")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Erreur lors du test:")
        print(f"   Type: {type(e).__name__}")
        print(f"   Message: {str(e)}")
        print(f"\nüîç Trace compl√®te:")
        traceback.print_exc()
        return False

def main():
    """Fonction principale"""
    
    print("üé§ TEST FONCTIONNEL TTS PIPER DIRECT")
    print("=" * 60)
    
    success = test_piper_direct()
    
    if success:
        print("\nüéâ TEST R√âUSSI !")
        print("Le syst√®me TTS Piper Direct est fonctionnel.")
        print("Vous avez entendu la synth√®se vocale fran√ßaise.")
    else:
        print("\n‚ùå √âCHEC DU TEST")
        print("V√©rifiez les erreurs ci-dessus.")
    
    print("\n" + "=" * 60)

if __name__ == "__main__":
    main() 