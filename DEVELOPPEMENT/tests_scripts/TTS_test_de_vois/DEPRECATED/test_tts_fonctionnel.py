#!/usr/bin/env python3
"""
Test fonctionnel complet du syst√®me TTS Piper
Synth√®se vocale r√©elle avec mod√®le fran√ßais

üö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE
"""

import os
import sys
import pathlib

# =============================================================================
# üöÄ PORTABILIT√â AUTOMATIQUE - EX√âCUTABLE DEPUIS N'IMPORTE O√ô
# =============================================================================
def _setup_portable_environment():
    """Configure l'environnement pour ex√©cution portable"""
    # D√©terminer le r√©pertoire racine du projet
    current_file = pathlib.Path(__file__).resolve()
    
    # Chercher le r√©pertoire racine (contient .git ou marqueurs projet)
    project_root = current_file
    for parent in current_file.parents:
        if any((parent / marker).exists() for marker in ['.git', 'pyproject.toml', 'requirements.txt', '.taskmaster']):
            project_root = parent
            break
    
    # Ajouter le projet root au Python path
    if str(project_root) not in sys.path:
        sys.path.insert(0, str(project_root))
    
    # Changer le working directory vers project root
    os.chdir(project_root)
    
    # Configuration GPU RTX 3090 obligatoire
    os.environ['CUDA_VISIBLE_DEVICES'] = '1'        # RTX 3090 24GB EXCLUSIVEMENT
    os.environ['CUDA_DEVICE_ORDER'] = 'PCI_BUS_ID'  # Ordre stable des GPU
    
    print(f"üéÆ GPU Configuration: RTX 3090 (CUDA:1) forc√©e")
    print(f"üìÅ Project Root: {project_root}")
    print(f"üíª Working Directory: {os.getcwd()}")
    
    return project_root

# Initialiser l'environnement portable
_PROJECT_ROOT = _setup_portable_environment()

# Maintenant imports normaux...

import time
import traceback

# Ajouter le r√©pertoire courant au path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_piper_synthesis():
    """Test de synth√®se vocale compl√®te avec Piper"""
    
    print("üéØ Test fonctionnel TTS Piper")
    print("=" * 50)
    
    # Configuration du test
    config = {
        'model_path': './models/fr_FR-siwis-medium.onnx',
        'use_gpu': True
    }
    
    # Texte de test en fran√ßais
    test_text = "Bonjour ! Je suis LUXA, votre assistant vocal intelligent. Ceci est un test de synth√®se vocale fran√ßaise avec Piper."
    
    try:
        # √âtape 1: V√©rification du mod√®le
        print("\n1. üîç V√©rification du mod√®le...")
        if not os.path.exists(config['model_path']):
            print(f"‚ùå Mod√®le non trouv√©: {config['model_path']}")
            return False
        
        file_size = os.path.getsize(config['model_path']) / (1024*1024)  # MB
        print(f"‚úÖ Mod√®le trouv√©: {config['model_path']} ({file_size:.1f} MB)")
        
        # √âtape 2: Importation du handler
        print("\n2. üì¶ Chargement du handler TTS...")
        from TTS.tts_handler_piper import TTSHandlerPiper
        print("‚úÖ Handler import√© avec succ√®s")
        
        # √âtape 3: Initialisation
        print("\n3. üöÄ Initialisation du syst√®me TTS...")
        start_time = time.time()
        
        tts_handler = TTSHandlerPiper(config)
        
        init_time = time.time() - start_time
        print(f"‚úÖ Syst√®me initialis√© en {init_time:.2f}s")
        
        # √âtape 4: Test de synth√®se
        print("\n4. üîä Test de synth√®se vocale...")
        print(f"Texte: '{test_text}'")
        
        synthesis_start = time.time()
        
        # Appel de la synth√®se
        tts_handler.speak(test_text)
        
        synthesis_time = time.time() - synthesis_start
        print(f"‚úÖ Synth√®se termin√©e en {synthesis_time:.2f}s")
        
        # √âtape 5: R√©sultats
        print("\n5. üìä R√©sultats du test:")
        print(f"   ‚Ä¢ Temps d'initialisation: {init_time:.2f}s")
        print(f"   ‚Ä¢ Temps de synth√®se: {synthesis_time:.2f}s")
        print(f"   ‚Ä¢ Longueur du texte: {len(test_text)} caract√®res")
        print(f"   ‚Ä¢ Performance: {len(test_text)/synthesis_time:.1f} caract√®res/s")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Erreur lors du test:")
        print(f"   Type: {type(e).__name__}")
        print(f"   Message: {str(e)}")
        print(f"\nüîç Trace compl√®te:")
        traceback.print_exc()
        return False

def test_advanced_features():
    """Test des fonctionnalit√©s avanc√©es"""
    
    print("\n" + "=" * 50)
    print("üß™ Tests avanc√©s")
    print("=" * 50)
    
    config = {
        'model_path': './models/fr_FR-siwis-medium.onnx',
        'use_gpu': True
    }
    
    try:
        from TTS.tts_handler_piper import TTSHandlerPiper
        tts_handler = TTSHandlerPiper(config)
        
        # Test 1: Texte court
        print("\n1. Test texte court:")
        short_text = "Salut !"
        start = time.time()
        tts_handler.speak(short_text)
        print(f"   ‚úÖ Texte court ({len(short_text)} chars) en {time.time()-start:.2f}s")
        
        # Test 2: Texte long
        print("\n2. Test texte long:")
        long_text = "Ceci est un test de synth√®se vocale avec un texte plus long pour √©valuer les performances sur plusieurs phrases. LUXA est un assistant vocal intelligent qui utilise des technologies avanc√©es pour fournir une exp√©rience utilisateur de haute qualit√©."
        start = time.time()
        tts_handler.speak(long_text)
        print(f"   ‚úÖ Texte long ({len(long_text)} chars) en {time.time()-start:.2f}s")
        
        # Test 3: Caract√®res sp√©ciaux
        print("\n3. Test caract√®res sp√©ciaux:")
        special_text = "Test avec des chiffres 123, des signes ! ? @ # et des accents: √©√†√®√π√¥√Æ"
        start = time.time()
        tts_handler.speak(special_text)
        print(f"   ‚úÖ Caract√®res sp√©ciaux en {time.time()-start:.2f}s")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur tests avanc√©s: {e}")
        return False

def main():
    """Fonction principale du test"""
    
    print("üé§ TEST FONCTIONNEL COMPLET - SYST√àME TTS PIPER")
    print("=" * 60)
    
    # Test de base
    success = test_piper_synthesis()
    
    if success:
        print("\n‚úÖ Test de base r√©ussi !")
        
        # Tests avanc√©s si le test de base passe
        advanced_success = test_advanced_features()
        
        if advanced_success:
            print("\nüéâ TOUS LES TESTS R√âUSSIS !")
            print("Le syst√®me TTS Piper est enti√®rement fonctionnel.")
        else:
            print("\n‚ö†Ô∏è Tests de base OK, mais probl√®mes avec les tests avanc√©s")
    else:
        print("\n‚ùå √âchec du test de base")
        print("V√©rifiez la configuration et les d√©pendances")
    
    print("\n" + "=" * 60)
    print("Fin des tests")

if __name__ == "__main__":
    main() 