#!/usr/bin/env python3\n\"\"\"\nTest TTS Simple - Phase 3 Validée\n🚨 CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE\n\"\"\"\n\nimport os\nimport sys\nimport asyncio\nimport time\n\n# =============================================================================\n# 🚨 CONFIGURATION CRITIQUE GPU - RTX 3090 UNIQUEMENT \n# =============================================================================\nos.environ['CUDA_VISIBLE_DEVICES'] = '1'        # RTX 3090 24GB EXCLUSIVEMENT\nos.environ['CUDA_DEVICE_ORDER'] = 'PCI_BUS_ID'  # Ordre stable des GPU\nos.environ['PYTORCH_CUDA_ALLOC_CONF'] = 'max_split_size_mb:1024'  # Optimisation mémoire\n\nprint(\"🎮 GPU Configuration: RTX 3090 (CUDA:1) forcée\")\nprint(f\"🔒 CUDA_VISIBLE_DEVICES: {os.environ.get('CUDA_VISIBLE_DEVICES')}\")\n\n# Imports\nsys.path.insert(0, '.')\nfrom TTS.tts_manager import UnifiedTTSManager\n\nasync def main():\n    print(\"\\n🎯 TEST TTS SIMPLE - PHASE 3\")\n    print(\"=\" * 40)\n    \n    # Configuration simple\n    config = {}\n    \n    try:\n        print(\"🔧 Initialisation TTS...\")\n        tts = UnifiedTTSManager(config)\n        print(\"✅ TTS initialisé\")\n        \n        # Test synthèse\n        text = \"Bonjour, test SuperWhisper V6\"\n        print(f\"🗣️ Synthèse: '{text}'\")\n        \n        start = time.perf_counter()\n        result = await tts.synthesize(text)\n        latency = (time.perf_counter() - start) * 1000\n        \n        print(f\"\\n📊 RÉSULTATS:\")\n        print(f\"✅ Succès: {result.success}\")\n        print(f\"🔧 Backend: {result.backend_used}\")\n        print(f\"⏱️ Latence: {latency:.1f}ms\")\n        \n        if result.audio_data:\n            print(f\"🔊 Audio: {len(result.audio_data)} bytes\")\n            \n            # Validation humaine simple\n            if result.backend_used != 'cache':\n                print(\"🎊 TTS FONCTIONNE - Backend réel utilisé\")\n                return True\n            else:\n                print(\"⚠️ Cache utilisé - Pas de synthèse réelle\")\n                return False\n        else:\n            print(\"❌ Pas d'audio généré\")\n            return False\n            \n    except Exception as e:\n        print(f\"❌ Erreur: {e}\")\n        return False\n    finally:\n        if 'tts' in locals():\n            await tts.cleanup()\n\nif __name__ == \"__main__\":\n    success = asyncio.run(main())\n    print(f\"\\n🎯 Résultat: {'SUCCÈS' if success else 'ÉCHEC'}\")\n 