#!/usr/bin/env python3
"""
VALIDATION FACTUELLE - test_rtx3090_detection.py
Test pour v√©rifier que le script de d√©tection utilise RTX 3090 (CUDA:0)
"""

import os
import torch
import subprocess
import sys

def test_detection_script_config():
    """Test factuel de la configuration dans le script de d√©tection"""
    print("üîç VALIDATION - test_rtx3090_detection.py")
    print("="*50)
    
    # Lire le contenu du fichier
    script_path = "test_rtx3090_detection.py"
    
    try:
        with open(script_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        print(f"‚úÖ Fichier lu: {script_path}")
        
        # V√©rifier CUDA_VISIBLE_DEVICES
        cuda_visible_line = None
        for line in content.split('\n'):
            if 'CUDA_VISIBLE_DEVICES' in line and '=' in line and 'environ' in line:
                cuda_visible_line = line.strip()
                break
        
        if cuda_visible_line:
            print(f"   Configuration trouv√©e: {cuda_visible_line}")
            if "'0'" in cuda_visible_line:
                print("   ‚úÖ CUDA_VISIBLE_DEVICES utilise '0' (RTX 3090)")
                config_ok = True
            else:
                print("   ‚ùå CUDA_VISIBLE_DEVICES n'utilise pas '0'")
                config_ok = False
        else:
            print("   ‚ùå CUDA_VISIBLE_DEVICES non trouv√©")
            config_ok = False
        
        # V√©rifier les r√©f√©rences device dans les commentaires et le code
        device_issues = []
        for i, line in enumerate(content.split('\n'), 1):
            if 'cuda:0' in line.lower() or 'device 0' in line.lower():
                print(f"   ‚úÖ Ligne {i}: R√©f√©rence correcte CUDA:0")
            elif 'cuda:1' in line.lower() or ('device 1' in line.lower() and 'visible' not in line.lower()):
                device_issues.append(f"Ligne {i}: {line.strip()}")
        
        if device_issues:
            print("   ‚ùå R√©f√©rences incorrectes trouv√©es:")
            for issue in device_issues:
                print(f"     - {issue}")
            device_ok = False
        else:
            print("   ‚úÖ Aucune r√©f√©rence incorrecte trouv√©e")
            device_ok = True
        
        return config_ok and device_ok
        
    except Exception as e:
        print(f"‚ùå Erreur lecture fichier: {e}")
        return False

def test_script_execution():
    """Test d'ex√©cution du script de d√©tection"""
    print("\nüöÄ TEST EX√âCUTION SCRIPT")
    print("="*40)
    
    try:
        # Nettoyer l'environnement pour test propre
        env = os.environ.copy()
        if 'CUDA_VISIBLE_DEVICES' in env:
            del env['CUDA_VISIBLE_DEVICES']
        
        # Ex√©cuter le script
        result = subprocess.run(
            [sys.executable, "test_rtx3090_detection.py"],
            capture_output=True,
            text=True,
            timeout=30,
            env=env
        )
        
        print(f"   Code retour: {result.returncode}")
        
        if result.returncode == 0:
            output = result.stdout
            print("   ‚úÖ Script ex√©cut√© avec succ√®s")
            
            # V√©rifier que RTX 3090 est d√©tect√©e
            if "RTX 3090" in output and "‚úÖ OUI" in output:
                print("   ‚úÖ RTX 3090 d√©tect√©e par le script")
                return True
            else:
                print("   ‚ùå RTX 3090 non d√©tect√©e correctement")
                print("   Output:", output[:200])
                return False
        else:
            print(f"   ‚ùå Script a √©chou√©")
            print("   Erreur:", result.stderr[:200])
            return False
            
    except subprocess.TimeoutExpired:
        print("   ‚ùå Script timeout (>30s)")
        return False
    except Exception as e:
        print(f"   ‚ùå Erreur ex√©cution: {e}")
        return False

def test_gpu_direct():
    """Test direct de la GPU RTX 3090"""
    print("\nüéÆ TEST GPU DIRECT")
    print("="*30)
    
    # Clear environment
    if 'CUDA_VISIBLE_DEVICES' in os.environ:
        del os.environ['CUDA_VISIBLE_DEVICES']
    
    if not torch.cuda.is_available():
        print("‚ùå CUDA non disponible")
        return False
    
    try:
        # Test device 0
        gpu_name = torch.cuda.get_device_name(0)
        gpu_memory = torch.cuda.get_device_properties(0).total_memory / 1024**3
        
        print(f"   Device 0: {gpu_name}")
        print(f"   VRAM: {gpu_memory:.1f}GB")
        
        is_rtx3090 = "3090" in gpu_name
        print(f"   RTX 3090 confirm√©e: {'‚úÖ OUI' if is_rtx3090 else '‚ùå NON'}")
        
        return is_rtx3090
        
    except Exception as e:
        print(f"‚ùå Erreur GPU: {e}")
        return False

if __name__ == "__main__":
    print("üö® VALIDATION D√âTECTION RTX 3090")
    print("="*60)
    
    # Tests
    config_valid = test_detection_script_config()
    exec_valid = test_script_execution()
    gpu_valid = test_gpu_direct()
    
    # R√©sultat final
    print(f"\nüéØ R√âSULTAT FINAL:")
    print(f"   Configuration script: {'‚úÖ' if config_valid else '‚ùå'}")
    print(f"   Ex√©cution script: {'‚úÖ' if exec_valid else '‚ùå'}")
    print(f"   GPU directe: {'‚úÖ' if gpu_valid else '‚ùå'}")
    
    overall_success = config_valid and exec_valid and gpu_valid
    print(f"   Validation globale: {'‚úÖ R√âUSSIE' if overall_success else '‚ùå √âCHEC'}")
    
    if overall_success:
        print("   ‚úÖ test_rtx3090_detection.py utilise correctement RTX 3090")
    else:
        print("   ‚ùå test_rtx3090_detection.py n√©cessite correction") 