#!/usr/bin/env python3
"""
Script de rappel automatique pour la documentation obligatoire.
Ce script v√©rifie si le journal de d√©veloppement a √©t√© mis √† jour r√©cemment.
"""

import os
import sys
import subprocess
from datetime import datetime, timedelta
from pathlib import Path


def get_project_root():
    """Trouve la racine du projet (dossier contenant .taskmaster)"""
    current = Path.cwd()
    while current != current.parent:
        if (current / '.taskmaster').exists():
            return current
        current = current.parent
    return None


def check_journal_update():
    """V√©rifie si le journal a √©t√© mis √† jour dans les derni√®res 24h"""
    project_root = get_project_root()
    if not project_root:
        print("‚ùå Racine du projet non trouv√©e")
        return False
    
    journal_path = project_root / "docs" / "journal_developpement.md"
    
    if not journal_path.exists():
        print("‚ùå Journal de d√©veloppement non trouv√© !")
        print(f"   Chemin attendu: {journal_path}")
        return False
    
    # V√©rifier la date de modification
    mod_time = datetime.fromtimestamp(journal_path.stat().st_mtime)
    now = datetime.now()
    time_since_update = now - mod_time
    
    if time_since_update > timedelta(hours=24):
        print(f"‚ö†Ô∏è  RAPPEL DOCUMENTATION OBLIGATOIRE !")
        print(f"   Le journal n'a pas √©t√© mis √† jour depuis {time_since_update}")
        print(f"   Derni√®re modification: {mod_time.strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"   Fichier: {journal_path}")
        print()
        show_reminder_help()
        return False
    else:
        print(f"‚úÖ Journal √† jour (modifi√© il y a {time_since_update})")
        return True


def show_reminder_help():
    """Affiche l'aide pour utiliser le template de documentation"""
    print("üìù TEMPLATE DE DOCUMENTATION OBLIGATOIRE:")
    print()
    print("### YYYY-MM-DD - [Titre de la session]")
    print("**Contexte**: [Description du probl√®me/objectif]")
    print()
    print("**Analyse**:")
    print("- [Point d'analyse 1]")
    print("- [Point d'analyse 2]")
    print()
    print("**D√©cisions techniques**:")
    print("- [D√©cision 1 avec justification]")
    print("- [D√©cision 2 avec justification]")
    print()
    print("**Impl√©mentation**:")
    print("- [x] [T√¢che compl√©t√©e]")
    print("- [ ] [T√¢che en cours]")
    print()
    print("**Tests/Validation**:")
    print("- [R√©sultat test 1]")
    print("- [R√©sultat test 2]")
    print()
    print("**Notes importantes**:")
    print("- [Note critique 1]")
    print("- [Note critique 2]")
    print()
    print("**Prochaines √©tapes**:")
    print("- [ ] [Action suivante]")
    print("- [ ] [Action suivante]")
    print()
    print("üîß ACTIONS RECOMMAND√âES:")
    print("1. Ouvrir docs/journal_developpement.md")
    print("2. Ajouter une nouvelle entr√©e avec le template ci-dessus")
    print("3. Documenter votre session de d√©veloppement actuelle")
    print("4. Sauvegarder et commiter dans Git")
    print()


def check_git_status():
    """V√©rifie si des changements non commit√©es existent"""
    try:
        result = subprocess.run(['git', 'status', '--porcelain'], 
                              capture_output=True, text=True, check=True)
        if result.stdout.strip():
            print("‚ö†Ô∏è  Changements non commit√©es d√©tect√©s !")
            print("   N'oubliez pas de documenter vos changements avant de commiter.")
            return False
        return True
    except subprocess.CalledProcessError:
        print("‚ùå Erreur lors de la v√©rification Git")
        return False


def update_taskmaster_status():
    """Met √† jour le statut TaskManager si n√©cessaire"""
    try:
        # V√©rifier le statut de la t√¢che 11.2 (synchronisation Git)
        result = subprocess.run(['task-master', 'show', '11.2'], 
                              capture_output=True, text=True, check=True)
        if 'pending' in result.stdout:
            print("üí° Suggestion: Marquer la t√¢che 11.2 comme termin√©e")
            print("   task-master set-status --id=11.2 --status=done")
    except subprocess.CalledProcessError:
        pass  # TaskManager peut ne pas √™tre disponible


def main():
    """Fonction principale de v√©rification"""
    print("üîç V√©rification du journal de d√©veloppement obligatoire...")
    print()
    
    journal_ok = check_journal_update()
    git_ok = check_git_status()
    
    if journal_ok and git_ok:
        print("‚úÖ Toutes les v√©rifications pass√©es !")
        update_taskmaster_status()
    else:
        print("‚ùå Action requise pour la documentation obligatoire")
        sys.exit(1)


if __name__ == "__main__":
    main() 