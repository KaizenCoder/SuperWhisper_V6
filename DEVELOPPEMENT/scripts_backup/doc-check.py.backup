#!/usr/bin/env python3
"""
Script d'aide rapide pour la documentation obligatoire.
Usage: python luxa/scripts/doc-check.py [--update]
"""

import os
import sys
import subprocess
from datetime import datetime
from pathlib import Path


def get_project_root():
    """Trouve la racine du projet"""
    current = Path.cwd()
    while current != current.parent:
        if (current / '.taskmaster').exists():
            return current
        current = current.parent
    return None


def create_journal_entry():
    """Crée une nouvelle entrée de journal avec le template"""
    project_root = get_project_root()
    if not project_root:
        print("❌ Racine du projet non trouvée")
        return False
    
    journal_path = project_root / "docs" / "journal_developpement.md"
    today = datetime.now().strftime("%Y-%m-%d")
    
    template = f"""
### {today} - [Titre de la session]
**Contexte**: [Description du problème/objectif]

**Analyse**:
- [Point d'analyse 1]
- [Point d'analyse 2]

**Décisions techniques**:
- [Décision 1 avec justification]
- [Décision 2 avec justification]

**Implémentation**:
- [x] [Tâche complétée]
- [ ] [Tâche en cours]

**Tests/Validation**:
- [Résultat test 1]
- [Résultat test 2]

**Notes importantes**:
- [Note critique 1]
- [Note critique 2]

**Prochaines étapes**:
- [ ] [Action suivante]
- [ ] [Action suivante]

---

"""
    
    try:
        with open(journal_path, 'a', encoding='utf-8') as f:
            f.write(template)
        print(f"✅ Nouvelle entrée ajoutée dans {journal_path}")
        print(f"📝 Éditez le fichier pour compléter la documentation")
        return True
    except Exception as e:
        print(f"❌ Erreur lors de l'ajout: {e}")
        return False


def show_status():
    """Affiche le statut de la documentation et TaskManager"""
    print("📊 STATUS DE LA DOCUMENTATION OBLIGATOIRE")
    print("=" * 50)
    
    # Vérifier le journal
    project_root = get_project_root()
    if project_root:
        journal_path = project_root / "docs" / "journal_developpement.md"
        if journal_path.exists():
            mod_time = datetime.fromtimestamp(journal_path.stat().st_mtime)
            print(f"📄 Journal: {journal_path}")
            print(f"🕐 Dernière modification: {mod_time.strftime('%Y-%m-%d %H:%M:%S')}")
        else:
            print("❌ Journal non trouvé !")
    
    # Vérifier TaskManager
    try:
        result = subprocess.run(['task-master', 'show', '11'], 
                              capture_output=True, text=True, check=True)
        print("\n📋 TÂCHE TASKMASTER #11:")
        # Extraire info importante
        lines = result.stdout.split('\n')
        for line in lines:
            if 'Status:' in line or 'Subtasks' in line or 'Progress:' in line:
                print(f"   {line.strip()}")
    except:
        print("⚠️  TaskManager non disponible")
    
    # Vérifier Git
    try:
        result = subprocess.run(['git', 'status', '--porcelain'], 
                              capture_output=True, text=True, check=True)
        if result.stdout.strip():
            print(f"\n🔄 Changements Git non commitées: {len(result.stdout.strip().split())}")
        else:
            print("\n✅ Pas de changements Git en attente")
    except:
        print("\n⚠️  Git non disponible")


def main():
    """Fonction principale"""
    if len(sys.argv) > 1 and sys.argv[1] == '--update':
        print("📝 Ajout d'une nouvelle entrée de journal...")
        if create_journal_entry():
            print("\n💡 N'oubliez pas de:")
            print("   1. Compléter le template avec vos informations")
            print("   2. Sauvegarder le fichier")
            print("   3. Commiter dans Git")
            print("   4. Marquer les tâches TaskManager terminées")
        else:
            sys.exit(1)
    else:
        show_status()
        print("\n🔧 COMMANDES DISPONIBLES:")
        print("   python luxa/scripts/doc-check.py --update  # Ajouter nouvelle entrée")
        print("   task-master show 11                        # Voir tâche documentation")
        print("   task-master set-status --id=11.2 --status=done  # Marquer tâche Git")


if __name__ == "__main__":
    main() 