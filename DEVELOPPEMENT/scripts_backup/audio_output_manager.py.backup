#!/usr/bin/env python3
"""
AudioOutputManager - Gestionnaire de sortie audio
üö® CONFIGURATION GPU: RTX 3090 (CUDA:1) OBLIGATOIRE

Module simple pour lecture audio dans le pipeline complet
"""

import os
import sys
import asyncio
import tempfile
import subprocess
from pathlib import Path

# =============================================================================
# üö® CONFIGURATION CRITIQUE GPU - RTX 3090 UNIQUEMENT 
# =============================================================================
os.environ['CUDA_VISIBLE_DEVICES'] = '1'        # RTX 3090 24GB EXCLUSIVEMENT
os.environ['CUDA_DEVICE_ORDER'] = 'PCI_BUS_ID'  # Ordre stable des GPU

print("üéÆ AudioOutputManager - Configuration GPU RTX 3090 (CUDA:1) forc√©e")
print(f"üîí CUDA_VISIBLE_DEVICES: {os.environ.get('CUDA_VISIBLE_DEVICES')}")

class AudioOutputManager:
    """Gestionnaire simple de sortie audio"""
    
    def __init__(self):
        """Initialisation du gestionnaire audio"""
        self.temp_dir = Path(tempfile.gettempdir()) / "superwhisper_audio"
        self.temp_dir.mkdir(exist_ok=True)
        print("‚úÖ AudioOutputManager initialis√©")
    
    async def play_audio(self, audio_data: bytes) -> bool:
        """
        Lecture audio simple
        
        Args:
            audio_data: Donn√©es audio en bytes
            
        Returns:
            bool: True si succ√®s
        """
        try:
            # Sauvegarde temporaire
            temp_file = self.temp_dir / f"temp_audio_{os.getpid()}.wav"
            
            with open(temp_file, 'wb') as f:
                f.write(audio_data)
            
            print(f"üîä Lecture audio: {len(audio_data):,} bytes")
            
            # Lecture avec Windows Media Player ou autre
            if os.name == 'nt':  # Windows
                # Utilisation de PowerShell pour lecture audio
                cmd = [
                    "powershell", "-Command",
                    f"(New-Object Media.SoundPlayer '{temp_file}').PlaySync()"
                ]
                
                # Ex√©cution asynchrone
                process = await asyncio.create_subprocess_exec(
                    *cmd,
                    stdout=asyncio.subprocess.PIPE,
                    stderr=asyncio.subprocess.PIPE
                )
                
                stdout, stderr = await process.communicate()
                
                if process.returncode == 0:
                    print("‚úÖ Audio lu avec succ√®s")
                    return True
                else:
                    print(f"‚ö†Ô∏è Erreur lecture audio: {stderr.decode()}")
                    return False
            else:
                # Linux/Mac - utiliser aplay ou afplay
                print("‚ö†Ô∏è Lecture audio non impl√©ment√©e pour ce syst√®me")
                return False
                
        except Exception as e:
            print(f"‚ùå Erreur AudioOutputManager: {e}")
            return False
        finally:
            # Nettoyage
            try:
                if temp_file.exists():
                    temp_file.unlink()
            except:
                pass
    
    def close(self):
        """Fermeture propre du gestionnaire"""
        try:
            # Nettoyage r√©pertoire temporaire
            if self.temp_dir.exists():
                for file in self.temp_dir.glob("temp_audio_*.wav"):
                    try:
                        file.unlink()
                    except:
                        pass
            print("‚úÖ AudioOutputManager ferm√©")
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur fermeture AudioOutputManager: {e}")

# Test simple
if __name__ == "__main__":
    async def test_audio():
        manager = AudioOutputManager()
        
        # Test avec donn√©es vides
        success = await manager.play_audio(b"test")
        print(f"Test audio: {'‚úÖ Succ√®s' if success else '‚ùå √âchec'}")
        
        manager.close()
    
    asyncio.run(test_audio()) 